import{_ as s,c as o,o as n,a}from"./app.1ac39c62.js";const t="/h-web/javascript/demo-prototype.png",l="/h-web/javascript/proto-process.png",e="/h-web/javascript/macrotask.png",r="/h-web/javascript/microtask.png",g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"基本类型","slug":"基本类型","link":"#基本类型","children":[]},{"level":3,"title":"引用类型","slug":"引用类型","link":"#引用类型","children":[]},{"level":3,"title":"两种数据类型的区别","slug":"两种数据类型的区别","link":"#两种数据类型的区别","children":[]}]},{"level":2,"title":"深拷贝 & 浅拷贝","slug":"深拷贝-浅拷贝","link":"#深拷贝-浅拷贝","children":[]},{"level":2,"title":"原型及原型链","slug":"原型及原型链","link":"#原型及原型链","children":[{"level":3,"title":"函数.prototype.constructor === 函数","slug":"函数-prototype-constructor-函数","link":"#函数-prototype-constructor-函数","children":[]},{"level":3,"title":"实例对象.__proto__ === 函数.prototype","slug":"实例对象-proto-函数-prototype","link":"#实例对象-proto-函数-prototype","children":[]},{"level":3,"title":"原型链执行流程","slug":"原型链执行流程","link":"#原型链执行流程","children":[]}]},{"level":2,"title":"var、let、const 的区别","slug":"var、let、const-的区别","link":"#var、let、const-的区别","children":[{"level":3,"title":"对比","slug":"对比","link":"#对比","children":[]}]},{"level":2,"title":"暂时性死区","slug":"暂时性死区","link":"#暂时性死区","children":[]},{"level":2,"title":"作用域 & 闭包","slug":"作用域-闭包","link":"#作用域-闭包","children":[{"level":3,"title":"闭包","slug":"闭包","link":"#闭包","children":[]}]},{"level":2,"title":"ES6 新特性","slug":"es6-新特性","link":"#es6-新特性","children":[]},{"level":2,"title":"宏任务 & 微任务","slug":"宏任务-微任务","link":"#宏任务-微任务","children":[{"level":3,"title":"宏任务","slug":"宏任务","link":"#宏任务","children":[]},{"level":3,"title":"微任务","slug":"微任务","link":"#微任务","children":[]}]},{"level":2,"title":"map 和 forEach 的区别","slug":"map-和-foreach-的区别","link":"#map-和-foreach-的区别","children":[]},{"level":2,"title":"for...in & for...of","slug":"for-in-for-of","link":"#for-in-for-of","children":[]},{"level":2,"title":"Set、Map、WeakSet 和 WeakMap 的区别","slug":"set、map、weakset-和-weakmap-的区别","link":"#set、map、weakset-和-weakmap-的区别","children":[]},{"level":2,"title":"内存泄漏的几种情况","slug":"内存泄漏的几种情况","link":"#内存泄漏的几种情况","children":[]}],"relativePath":"component/javascript.md"}'),i={name:"component/javascript.md"},p=a(`<h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-hidden="true">#</a></h2><h3 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-hidden="true">#</a></h3><ul><li>string（字符串）</li><li>boolean （布尔）</li><li>number（数字）</li><li>undefined（undefined）</li><li>null（null）</li><li>symbol（代表创建后独一无二且不可变的数据类型）</li></ul><h3 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-hidden="true">#</a></h3><ul><li>Object（对象）</li><li>Array（数组）</li><li>Function（函数）</li></ul><h3 id="两种数据类型的区别" tabindex="-1">两种数据类型的区别 <a class="header-anchor" href="#两种数据类型的区别" aria-hidden="true">#</a></h3><ol><li><p>存放位置不同</p><blockquote><p>基本数据类型变量存放在<strong>栈内存</strong>中，如果在一个函数中声明基本类型的变量，则 函数执行完毕，变量自动销毁。</p><p>引用类型的变量名保存在<strong>栈内存</strong>中，变量值存储在<strong>堆内存</strong>，引用类型的变量 不会自动销毁，当没有引用变量引用它时，系统的垃圾回收机制会回收它。</p></blockquote><details class="details custom-block"><summary>堆栈区别</summary><blockquote><ol><li>堆空间大，栈运行速度快。</li><li>堆内存是无序存储，可以根据引用直接获取。</li><li>基础数据类型比较稳定，相对来说占用的内存小。</li><li>引用数据类型大小是动态的，而且是无限的。</li></ol></blockquote></details></li><li><p>赋值不同</p><blockquote><p>基本类型的赋值相当于<strong>深拷贝</strong>，赋值后又开辟一个新的内存空间，两者互不影响 。</p><p>引用类型赋值相当于<strong>浅拷贝</strong>，对对象进行操作时，操作的只是对象的引用。</p></blockquote></li></ol><hr><h2 id="深拷贝-浅拷贝" tabindex="-1">深拷贝 &amp; 浅拷贝 <a class="header-anchor" href="#深拷贝-浅拷贝" aria-hidden="true">#</a></h2><p><strong>浅拷贝</strong>: (拷贝一层) 如果对象的属性是基本类型,拷贝的就是基本类型的值,如果属性 是引用类型, 拷贝的就是内存地址,两个对象用的是同一个内存,修改其中一个的值,另一个 也跟着改变.</p><p><strong>深拷贝</strong>: (拷贝全部层级)只有内存地址不一样,其他完全一样,修改之后不会影响到原来 的对象.</p><p><strong>实现浅拷贝的方法:</strong></p><ul><li><p><code>Object.assign</code>（对象、数组）</p><blockquote><p>参数：</p><p>target---&gt;目标对象</p><p>source---&gt;源对象</p><p>返回值 ：target，即目标对象</p></blockquote><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">&lt;!--</span><span style="color:var(--shiki-color-text);"> 对象 </span><span style="color:var(--shiki-token-keyword);">--&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;lin&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newObj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.assign</span><span style="color:var(--shiki-color-text);">({}</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> obj);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);">.name </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;xxx&quot;</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 改变原来的对象</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newObj); </span><span style="color:var(--shiki-token-comment);">// { name: &#39;lin&#39; } 新对象不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(obj </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newObj); </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">&lt;!--</span><span style="color:var(--shiki-color-text);"> 数组 </span><span style="color:var(--shiki-token-keyword);">--&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newArr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.assign</span><span style="color:var(--shiki-color-text);">([]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> arr);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">arr[</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">100</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 改变原来的数组</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newArr); </span><span style="color:var(--shiki-token-comment);">// [1, 2, 3] // 新数组不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(arr </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newArr); </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><code>扩展运算符</code>（对象、数组）</p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">&lt;!--</span><span style="color:var(--shiki-color-text);"> 对象 </span><span style="color:var(--shiki-token-keyword);">--&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;lin&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newObj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> { </span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">obj };</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);">.name </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;xxx&quot;</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 改变原来的对象</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newObj); </span><span style="color:var(--shiki-token-comment);">// { name: &#39;lin&#39; } // 新对象不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(obj </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newObj); </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">&lt;!--</span><span style="color:var(--shiki-color-text);"> 数组 </span><span style="color:var(--shiki-token-keyword);">--&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newArr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">arr];</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">arr[</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">100</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 改变原来的数组</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newArr); </span><span style="color:var(--shiki-token-comment);">// [1, 2, 3] // 新数组不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(arr </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newArr); </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><code>slice</code>（数组）</p><blockquote><p>参数:</p><p>start:开始位置的索引</p><p>end:结束位置的索引(但不包含该索引位置的元素)</p></blockquote><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newArr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.slice</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">arr[</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">100</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 改变原来的数组</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newArr); </span><span style="color:var(--shiki-token-comment);">// [1, 2, 3] // 新数组不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(arr </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newArr); </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><code>concat</code>（数组）</p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newArr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> []</span><span style="color:var(--shiki-token-function);">.concat</span><span style="color:var(--shiki-color-text);">(arr);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">arr[</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">100</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 改变原来的数组</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newArr); </span><span style="color:var(--shiki-token-comment);">// [1, 2, 3] // 新数组不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(arr </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newArr); </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><code>Array.from</code>（数组）</p><blockquote><p>将一个类数组对象（有 length 属性的）或者可遍历对象转换成一个真正的数组</p></blockquote><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newArr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Array</span><span style="color:var(--shiki-token-function);">.from</span><span style="color:var(--shiki-color-text);">(arr);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">arr[</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">100</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 改变原来的数组</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newArr); </span><span style="color:var(--shiki-token-comment);">// [1, 2, 3] // 新数组不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(arr </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newArr); </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span></code></pre></div></details></li></ul><hr><h2 id="原型及原型链" tabindex="-1">原型及原型链 <a class="header-anchor" href="#原型及原型链" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">介绍</p><p>每个函数都有 <code>prototype</code> 属性，每个对象都有 <code>__proto__</code> 属性(这个属性称之为原型 )，在我们执行 new 的时候，对象的 <code>__proto__</code> 指向这个构造函数的 <code>prototype</code></p></div><h3 id="函数-prototype-constructor-函数" tabindex="-1">函数.prototype.constructor === 函数 <a class="header-anchor" href="#函数-prototype-constructor-函数" aria-hidden="true">#</a></h3><p>每个函数都有个 prototype 属性，这个属性指向函数的原型对象，同时 prototype 里面有 个 constructor 属性回指到该函数。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Demo</span><span style="color:var(--shiki-color-text);">() {}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Demo</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">constructor</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> Demo; </span><span style="color:var(--shiki-token-comment);">// true</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block"><summary>查看 Demo.prototype 结构</summary><p><img src="`+t+`" alt="Demo.prototype"></p></details><h3 id="实例对象-proto-函数-prototype" tabindex="-1">实例对象.<code>__proto__</code> === 函数.prototype <a class="header-anchor" href="#实例对象-proto-函数-prototype" aria-hidden="true">#</a></h3><p>使用 new 创建一个实例对象 d（使用 new 操作符后 Demo 就变成了构造函数）。d 是对象 ，自然有 <code>__proto__</code> (原型),此时原型指向构造函数 Demo 的 prototype。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Demo</span><span style="color:var(--shiki-color-text);">() {}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">d</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Demo</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">d</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">__proto__</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Demo</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="原型链执行流程" tabindex="-1">原型链执行流程 <a class="header-anchor" href="#原型链执行流程" aria-hidden="true">#</a></h3><p>当我们访问一个对象属性时，程序会先去这个对象里面找，如果没有找到就会去这个对象的 原型上找。</p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Demo</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.name </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;蓝桥&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Demo</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">say</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;我是&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.name);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">d</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Demo</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 虽然 Demo 上没有 say 方法，但是因为Demo的prototype上有此方法，所以下面的调用可以正常打印。</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">d</span><span style="color:var(--shiki-token-function);">.say</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 我是蓝桥</span></span>
<span class="line"></span></code></pre></div><p><img src="`+l+`" alt="原型链基本流程"></p></details><hr><h2 id="var、let、const-的区别" tabindex="-1">var、let、const 的区别 <a class="header-anchor" href="#var、let、const-的区别" aria-hidden="true">#</a></h2><h3 id="对比" tabindex="-1">对比 <a class="header-anchor" href="#对比" aria-hidden="true">#</a></h3><div class="vp-table__container"><table><thead><tr><th></th><th>var</th><th>let</th><th>cosnt</th></tr></thead><tbody><tr><td>变量提升</td><td>是</td><td>否</td><td>否</td></tr><tr><td>作用域</td><td>函数作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>作为全局变量时，是否成为 window 属性</td><td>是</td><td>否</td><td>否</td></tr><tr><td>是否可以重复声明</td><td>是</td><td>否</td><td>否</td></tr><tr><td>值是否可改变</td><td>是</td><td>是</td><td>简单类型不可修改</td></tr></tbody></table></div><hr><h2 id="暂时性死区" tabindex="-1">暂时性死区 <a class="header-anchor" href="#暂时性死区" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">介绍</p><p>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可 获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p></div><p>let 或 const 声明的变量拥有暂时性死区（TDZ）：当进入它的作用域，它不能被访问（获 取或设置）直到执行到达声明。</p><p>首先看看不具有暂时性死区的 var：</p><blockquote><ol><li>当进入 var 变量的作用域（包围它的函数），立即为它创建（绑定）存储空间。变 量会立即被初始化并赋值为 undefined。</li><li>当执行到变量声明的时候，如果变量定义了值则会被赋值。</li></ol></blockquote><p>通过 let 声明的变量拥有暂时性死区，生命周期如下：</p><blockquote><ol><li>当进入 let 变量的作用域（包围它的语法块），立即为它创建（绑定）存储空间。 此时变量仍是未初始化的。</li><li>获取或设置未初始化的变量将抛出异常 ReferenceError。</li><li>当执行到变量声明的时候，如果变量定义了值则会被赋值。如果没有定义值，则赋值 为 undefined。</li></ol></blockquote><p>const 工作方式与 let 类似，但是定义的时候必须赋值并且不能改变。</p><details class="details custom-block"><summary>查看案例</summary><blockquote><p>var 声明变量没有暂时性死区</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i); </span><span style="color:var(--shiki-token-comment);">// undefined</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">var</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i); </span><span style="color:var(--shiki-token-comment);">// 1</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})();</span></span>
<span class="line"></span></code></pre></div><blockquote><p>let 声明变量有暂时性死区</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i); </span><span style="color:var(--shiki-token-comment);">// Cannot access &#39;i&#39; before initialization</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i); </span><span style="color:var(--shiki-token-comment);">// 1</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})();</span></span>
<span class="line"></span></code></pre></div></details><hr><h2 id="作用域-闭包" tabindex="-1">作用域 &amp; 闭包 <a class="header-anchor" href="#作用域-闭包" aria-hidden="true">#</a></h2><p>es6 之前 JavaScript 只有函数级作用域，没有块级作用域。</p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">demo</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">var</span><span style="color:var(--shiki-color-text);"> a </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;蓝桥&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(a); </span><span style="color:var(--shiki-token-comment);">// 蓝桥</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(a); </span><span style="color:var(--shiki-token-comment);">//a is not defined</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">var</span><span style="color:var(--shiki-color-text);"> b </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;bbb&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(b); </span><span style="color:var(--shiki-token-comment);">// bbb(如果if条件为false则输出undefined)</span></span>
<span class="line"></span></code></pre></div></details><p><strong>经典题型</strong></p><p>请问以下代码打印的结果是？</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">var</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">; i </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">10</span><span style="color:var(--shiki-color-text);">; i</span><span style="color:var(--shiki-token-keyword);">++</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">setTimeout</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block"><summary>查看答案</summary><blockquote><p>执行结果: <strong>输出 10 次 10</strong></p><p>执行过程：</p><ol><li>代码执行 for 循环，i 依次从 0 加到 9，循环十次。</li><li>代码等待定时器 1 秒钟时间到，执行定时的里面的内容。</li><li>执行打印 i 语句，因为定时器函数中没有声明 i 变量，所以代码只能去定时器函数 外的作用域(也就是 window)去查找。</li><li>在外部找到了 i 此时 i 已经变成了 10，所以打印 10 次 10。</li></ol><p><strong>如果在当前作用域中没有发现此变量的声明，程序就会去父作用域查找，直到找到为止 。在浏览器中最外层作用域是 window，如果在 window 上也没有找到，就返回 xxx is not defined 查找结束。</strong></p></blockquote></details><h3 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-hidden="true">#</a></h3><div class="tip custom-block"><p class="custom-block-title">介绍</p><p>（closure）指有权访问另一个函数作用域中变量的函数——JavaScript 高级程序设计</p><p>可以延申变量的作用范围 容易造成内存泄漏（因为一直不销毁变量）</p></div><p>闭包就是可以让外部访问到函数内部的变量</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">demo</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">var</span><span style="color:var(--shiki-color-text);"> a </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;aaa&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> a;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  };</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">d</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">demo</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-function);">d</span><span style="color:var(--shiki-color-text);">()); </span><span style="color:var(--shiki-token-comment);">// aaa</span></span>
<span class="line"></span></code></pre></div><p>通过在 demo 函数中返回一个函数，在返回的函数中再返回这个变量，然后当我们在外部去 调用这个返回出来的函数时就可以得到这个变量的值。也就是说 d 函数 保存了对 a 的引 用，这就形成了闭包。</p><p><strong>还是上面经典例题: 运用闭包知识,让函数输出 0-9</strong></p><details class="details custom-block"><summary>查看答案</summary><blockquote><p><strong>方法一:</strong> 用 let 声明变量 i(不能用 const,因为常量不能修改),let 是块级作用域, 块内部的函数也在作用域内,可以访问到 i 的值.</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">; i </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">10</span><span style="color:var(--shiki-color-text);">; i</span><span style="color:var(--shiki-token-keyword);">++</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">setTimeout</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p><strong>方法二:</strong> 在 setTimeout 外边套一层自执行函数,把每次循环的 i 结果保存在当前作 用域下,当执行定时器的时候,可以去当前作用域找 i 的值.</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">var</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">; i </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">10</span><span style="color:var(--shiki-color-text);">; i</span><span style="color:var(--shiki-token-keyword);">++</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  (</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (i) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-function);">setTimeout</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  })(i);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre></div></details><hr><h2 id="es6-新特性" tabindex="-1">ES6 新特性 <a class="header-anchor" href="#es6-新特性" aria-hidden="true">#</a></h2><ul><li><p><strong>let 和 const</strong></p></li><li><p><strong>解构 &amp; 扩展运算符</strong></p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">people</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;张三&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  love</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;吃饭&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 把 name 和 love 解构出来</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> { </span><span style="color:var(--shiki-token-constant);">name</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">love</span><span style="color:var(--shiki-color-text);"> } </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> people;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(name</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> love); </span><span style="color:var(--shiki-token-comment);">// 张三 吃饭</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 扩展运算符</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">user</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> { </span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">people };</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(user); </span><span style="color:var(--shiki-token-comment);">// {name: &#39;张三&#39;, love: &#39;吃饭&#39;}</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><strong>函数可以设置默认参数 (函数的 legnth 属性会失效)</strong></p><details class="details custom-block"><summary>查看案例</summary><blockquote><p>通过 length 可以获取函数参数的个数</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">demo</span><span style="color:var(--shiki-color-text);">(name </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;张三&quot;</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;我是&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> name);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">demo</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">length</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 输出0 实际是有一个参数</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><strong>Symbol</strong></p><p>基本数据类型,表示独一无二的值. Symbol 值通过 <code>symbol</code> 函数生成</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">fnName</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Symbol</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">typeof</span><span style="color:var(--shiki-color-text);"> fnName; </span><span style="color:var(--shiki-token-comment);">// &quot;symbol&quot;</span></span>
<span class="line"></span></code></pre></div></li><li><p><strong>Set 和 Map 数据结构</strong></p><p>Set 类似数组,值唯一.</p><details class="details custom-block"><summary>查看使用方法</summary><blockquote><p><strong>基本使用</strong></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Set</span><span style="color:var(--shiki-color-text);">([</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.add</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 向arr中添加元素</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.delete</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 删除数据为1的元素</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);">.size; </span><span style="color:var(--shiki-token-comment);">// 返回arr长度</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.has</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 判断arr中是否有2这个元素</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.clear</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 清除所有元素</span></span>
<span class="line"></span></code></pre></div><blockquote><p><strong>数组去重</strong></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr2</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-keyword);">...new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Set</span><span style="color:var(--shiki-color-text);">(arr)];</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(arr2); </span><span style="color:var(--shiki-token-comment);">// [1,2,3,4]</span></span>
<span class="line"></span></code></pre></div></details><p>Map 类似对象,也通过键值对存储,区别是 Object 中的键只能是字符串,而 Map 中的键可 以是任意数据类型.</p><details class="details custom-block"><summary>查看使用方法</summary><blockquote><p><strong>基本使用</strong></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Map</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-token-function);">.set</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;name&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;张三&quot;</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 设置元素</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-token-function);">.get</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;name&quot;</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 张三</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-token-function);">.has</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;name&quot;</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 判断有没有这个元素</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-color-text);">.size; </span><span style="color:var(--shiki-token-comment);">// 获取map的长度</span></span>
<span class="line"></span></code></pre></div><blockquote><p><strong>键为 object 类型</strong></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Map</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">k</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;张三&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-token-function);">.set</span><span style="color:var(--shiki-color-text);">(k</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">18</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-token-function);">.get</span><span style="color:var(--shiki-color-text);">(k); </span><span style="color:var(--shiki-token-comment);">// 18</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><strong>Promise</strong></p><p>没有 Promise 之前使用回调函数实现异步变成,回调函数多的话会产生回调地狱 ,Promise 可以解决回调地狱.</p><details class="details custom-block"><summary>基本使用</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">promise</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);">(resolve</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);">reject){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-comment);">/*异步程序成功*/</span><span style="color:var(--shiki-color-text);">){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-function);">resolve</span><span style="color:var(--shiki-color-text);">(res)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-function);">reject</span><span style="color:var(--shiki-color-text);">(error)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">promise</span><span style="color:var(--shiki-token-function);">.then</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);">(res){}</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);">(error){})</span></span>
<span class="line"></span></code></pre></div></details><p>常用方法:</p><ol><li><p><code>Promise.prototype.then()</code> Promise 实例添加状态改变时的回调函数.</p></li><li><p><code>Promise.prototype.catch()</code> 发生错误时的回调函数.</p></li><li><p><code>Promise.all()</code> 可以将多个 Promise 实例包装成一个新的 Promise 实例.</p><p>返回值: 成功和失败的返回值不同,成功返回一个结果数组,失败则返回最先被 reject 的值.</p></li><li><p><code>Promise.race()</code> 可以将多个 Promise 实例包装成一个新的 Promise 实例.</p><p>返回值: 哪个结果获得的快,就返回哪个结果,不管结果本身时成功状态还是失败状态 .</p></li></ol></li></ul><hr><h2 id="宏任务-微任务" tabindex="-1">宏任务 &amp; 微任务 <a class="header-anchor" href="#宏任务-微任务" aria-hidden="true">#</a></h2><h3 id="宏任务" tabindex="-1">宏任务 <a class="header-anchor" href="#宏任务" aria-hidden="true">#</a></h3><p>JavaScript 是单线程,但浏览器是多线程的,JavaScript 执行在浏览器中，在 V8 里跑着的 一直是一个一个的宏任务.</p><p>宏任务代表: 主线程、定时器.</p><details class="details custom-block"><summary>查看案例</summary><blockquote><p>浏览器在执行下面代码时会先执行主线程代码（宏任务 1）然后再执行 setTimeout 里面 的代码。虽然 setTimeout 的定时时间为 0，但是浏览器在处理的时候会把它当做下一个 宏任务进行处理</p></blockquote><p><img src="`+e+'" alt="宏任务"></p></details><h3 id="微任务" tabindex="-1">微任务 <a class="header-anchor" href="#微任务" aria-hidden="true">#</a></h3><p>当浏览器执行完一个宏任务后,就会检查有没有可执行的微任务,如果有,先把当前微任务执 行完, 再去执行下一个宏任务.</p><p>微任务代表: ajax、回调函数、和 Promise.</p><p>流程如下: <img src="'+r+`" alt="微任务"></p><p><strong>经典例题</strong></p><p>以下代码的执行结果是?</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">setTimeout</span><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-color-text);">((res</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> req) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">res</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})</span><span style="color:var(--shiki-token-function);">.then</span><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">5</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block"><summary>查看答案</summary><blockquote><p>代码从上到下执行</p><p>⬇</p><p>打印 1</p><p>⬇</p><p>遇到 setTimeout 是下一个宏任务，目前先不处理</p><p>⬇</p><p>遇到 Promise 打印出 3 then 回调函数是微任务，先不处理</p><p>⬇</p><p>打印 5 且第一个宏任务执行完毕</p><p>⬇</p><p>开始执行微任务队列</p><p>⬇</p><p>打印 4 微任务队列执行完毕</p><p>⬇</p><p>开始执行下一个宏任务</p><p>⬇</p><p>打印 2</p><p>⬇</p><p>程序结束</p></blockquote><blockquote><p><strong>注意</strong>: 只有 Promise then 或者 catch 里面的方法是微任务，Promise 里面的回调 是当作主程序的宏任务进行处理的。</p></blockquote></details><hr><h2 id="map-和-foreach-的区别" tabindex="-1">map 和 forEach 的区别 <a class="header-anchor" href="#map-和-foreach-的区别" aria-hidden="true">#</a></h2><p><strong>相同点：</strong></p><ol><li>只能遍历数组，且循环遍历数组中的每一项</li><li>每次执行匿名函数都支持三个参数，参数分别为 item（当前项），index（索引值） ，arr（原数组）</li><li>匿名函数中的 this 都指向 window</li></ol><p><strong>不同点：</strong></p><ol><li>map()会分配内存空间存储新数组并返回，forEach()不会返回数据</li><li>forEach()允许回调更改原始数组的元素</li></ol><hr><h2 id="for-in-for-of" tabindex="-1">for...in &amp; for...of <a class="header-anchor" href="#for-in-for-of" aria-hidden="true">#</a></h2><p><strong>for...in</strong></p><ol><li>遍历获取索引</li><li>会遍历整个原型链</li><li>对于数组遍历，会返回数组中所有可枚举的属性(包括原型链上的可枚举属性 )</li></ol><details class="details custom-block"><summary>for-in 案例</summary><blockquote><p>基本使用</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 在原型链上的Object上自定义一个myFunc方法</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">myFunc01</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;1&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 在原型链上的Array上自定义一个myFunc方法</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Array</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">myFunc02</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (value) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">   </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;2&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> b </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-color-text);">]</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">in</span><span style="color:var(--shiki-color-text);"> b) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">打印结果：</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);"> myFunc02 myFunc01</span></span>
<span class="line"></span></code></pre></div><blockquote><p>如何只遍历自身属性？ （for-in 中增加 hasOwnProperty 判断）</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 在原型链上的Object上自定义一个myFunc方法</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">myFunc01</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;1&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 在原型链上的Array上自定义一个myFunc方法</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Array</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">myFunc02</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (value) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">   </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;2&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> b </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-color-text);">]</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> key </span><span style="color:var(--shiki-token-keyword);">in</span><span style="color:var(--shiki-color-text);"> b) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">b</span><span style="color:var(--shiki-token-function);">.hasOwnProperty</span><span style="color:var(--shiki-color-text);">(key)){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(key);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">打印结果：</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div></details><p><strong>for...of</strong></p><ol><li>遍历获取值</li><li>只遍历当前对象，不会遍历原型链</li><li>for-of 是 es6 新增的遍历方法，只限于迭代器(iterator)，不可以遍历普通对象(obj is not iterable).</li><li>可以正确响应 break、continue 和 return 语句</li></ol><p>可迭代的对象：包括 Array, Map, Set, String, TypedArray, arguments 对象等有迭代器 对象的集合</p><hr><h2 id="set、map、weakset-和-weakmap-的区别" tabindex="-1">Set、Map、WeakSet 和 WeakMap 的区别 <a class="header-anchor" href="#set、map、weakset-和-weakmap-的区别" aria-hidden="true">#</a></h2><p><strong>Set</strong></p><ol><li>成员不能重复</li><li>类似数组，只有键值，没有键名</li><li>可以遍历，方法有 add、delete、has</li></ol><p><strong>WeakSet</strong></p><ol><li>成员都是对象（引用）</li><li>成员都是弱引用，随时可以消失（不计入垃圾回收机制）。可以用来保存 DOM 节点，不 容易造成内存泄露</li><li>不能遍历，方法有 add、delete、has</li></ol><p><strong>Map</strong></p><ol><li>类似对象，有键值对，key 值可以为任意类型</li><li>可以遍历，方法很多，可以跟各种数据格式转换</li></ol><p><strong>WeakMap</strong></p><ol><li>只接受对象为键名（null 除外），不接受其他类型的值作为键名</li><li>键名指向的对象，不计入垃圾回收机制</li><li>不能遍历，方法同 get、set、has、delete；</li></ol><hr><h2 id="内存泄漏的几种情况" tabindex="-1">内存泄漏的几种情况 <a class="header-anchor" href="#内存泄漏的几种情况" aria-hidden="true">#</a></h2><ol><li>意外的全局变量</li><li>闭包</li><li>未被清空的定时器</li><li>未被销毁的事件监听</li><li>DOM 引用</li></ol><hr>`,100),c=[p];function k(y,h,v,d,x,u){return n(),o("div",null,c)}const b=s(i,[["render",k]]);export{g as __pageData,b as default};

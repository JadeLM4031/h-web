import{_ as s,c as n,o,a}from"./app.12bd6e9c.js";const t="/h-web/vue/vue2live.png",e="/h-web/vue/diff.png",l="/h-web/vue/diff-nokey.png",r="/h-web/vue/diff-key.png",m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Vue2 生命周期","slug":"vue2-生命周期","link":"#vue2-生命周期","children":[]},{"level":2,"title":"Vue3 生命周期","slug":"vue3-生命周期","link":"#vue3-生命周期","children":[]},{"level":2,"title":"customRef()","slug":"customref","link":"#customref","children":[]},{"level":2,"title":"markRaw()","slug":"markraw","link":"#markraw","children":[]},{"level":2,"title":"toRaw()","slug":"toraw","link":"#toraw","children":[]},{"level":2,"title":"虚拟 DOM","slug":"虚拟-dom","link":"#虚拟-dom","children":[]},{"level":2,"title":"Diff 算法","slug":"diff-算法","link":"#diff-算法","children":[]},{"level":2,"title":"v-for 中 key 的作用","slug":"v-for-中-key-的作用","link":"#v-for-中-key-的作用","children":[]},{"level":2,"title":"Vue2 组件通讯","slug":"vue2-组件通讯","link":"#vue2-组件通讯","children":[]},{"level":2,"title":"Vue3 组件通讯","slug":"vue3-组件通讯","link":"#vue3-组件通讯","children":[]}],"relativePath":"component/vue.md"}'),p={name:"component/vue.md"},i=a('<h2 id="vue2-生命周期" tabindex="-1">Vue2 生命周期 <a class="header-anchor" href="#vue2-生命周期" aria-hidden="true">#</a></h2><ul><li><strong>beforeCreate()</strong>（创建前） <blockquote><p>在实例初始化之后，数据观察 (data observer) 和 event/watcher 事件配置之前被调用。</p></blockquote></li><li><strong>created()</strong>（创建后） <blockquote><p>在实例创建完成后被立即调用。在这一步，实例已完成以下 的配置：数据观察 (data observer)，属性和方法的运算，watch/event 事件回调。这时 ，挂载阶段还没开始，$el 属性目前尚不可用。</p></blockquote></li><li><strong>beforeMount()</strong>（载入前） <blockquote><p>在挂载开始之前被调用，相关的 render 函数首次被调 用，该钩子函数在服务器渲染期间不被调用。</p></blockquote></li><li><strong>mounted()</strong>（载入后） <blockquote><p>实例被挂载后调用，这时 $el 被新创建的 vm.$el 替换了。 如果根实例挂载到了一个文档内的元素上，当 mounted() 被调用时 vm.$el 也在文档内 。</p></blockquote></li><li><strong>beforeUpdate()</strong>（更新前） <blockquote><p>是在 DOM 树生成之前、虚拟 DOM 树生成之后调用，调 用条件是这个 vm 实例已经 mounted()过。该钩子函数在服务器渲染期间不 被调用。</p></blockquote></li><li><strong>updated()</strong>（更新后） <blockquote><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后 会调用该钩子。</p></blockquote></li><li><strong>beforeDestroy()</strong>（销毁前） <blockquote><p>实例销毁之前调用。在这一步，实例仍然完全可用。</p></blockquote></li><li><strong>destroyed()</strong>（销毁后） <blockquote><p>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有 指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p></blockquote></li></ul><details class="details custom-block"><summary>查看图解</summary><p><img src="'+t+`" alt="Vue2声明周期"></p></details><hr><h2 id="vue3-生命周期" tabindex="-1">Vue3 生命周期 <a class="header-anchor" href="#vue3-生命周期" aria-hidden="true">#</a></h2><ol><li><p>beforeCreate() 和 created() 均被 <strong>setup()</strong> 替代了</p></li><li><p>多个钩子函数被重命名：</p><p>beforeMount -&gt; <strong>onBeforeMount()</strong></p><p>mounted() -&gt; <strong>onMounted()</strong></p><p>beforeUpdate() -&gt; <strong>onBeforeUpdate()</strong></p><p>updated() -&gt; <strong>onUpdated()</strong></p><p>beforeDestroy() -&gt; <strong>onBeforeUnmount()</strong></p><p>destroyed() -&gt; <strong>onUnmounted()</strong></p></li><li><p>新添两个 debug 钩子函数，这两个函数都会接收一个 DebuggerEvent 作为参数：</p><p><strong>onRenderTracked()</strong></p><p><strong>onRenderTriggered()</strong></p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">default</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">onRenderTriggered</span><span style="color:var(--shiki-color-text);">(e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">debugger</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// inspect which dependency is causing the component to re-render</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// (检查是哪个依赖关系导致了组件的重新渲染)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span></code></pre></div></details></li></ol><p><strong>生命周期函数的执行顺序？</strong></p><p>Vue3 兼容 Vue2 语法，在 Vue3 中也可以使用 Vue2 的回调函数（beforeDestroy() 和 destroyed() 除外），混合使用时，Vue3 的生 命周期会优先于 Vue2 执行。</p><details class="details custom-block"><summary>查看答案</summary><blockquote><p><strong>1. setup</strong></p><p><strong>2. onBeforeMount</strong></p><p><strong>3. onRenderTracked</strong></p><p><strong>4. onMounted</strong></p><p><strong>5. mounted</strong></p><p><strong>6. onRenderTriggered</strong></p><p><strong>7. onBeforeUpdate</strong></p><p><strong>8. onRenderTracked</strong></p><p><strong>9. onUpdated</strong></p><p><strong>10. onBeforeUnmount</strong></p><p><strong>11. onUnmounted</strong></p></blockquote><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">&lt;!-- LifeHook.html--&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">&lt;!</span><span style="color:var(--shiki-token-string-expression);">DOCTYPE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">html</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-string-expression);">html</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">lang</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;en&quot;</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  &lt;</span><span style="color:var(--shiki-token-string-expression);">head</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    &lt;</span><span style="color:var(--shiki-token-string-expression);">meta</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">charset</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;UTF-8&quot;</span><span style="color:var(--shiki-color-text);"> /&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    &lt;</span><span style="color:var(--shiki-token-string-expression);">title</span><span style="color:var(--shiki-color-text);">&gt;LifeHook&lt;/</span><span style="color:var(--shiki-token-string-expression);">title</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    &lt;</span><span style="color:var(--shiki-token-string-expression);">meta</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">name</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;viewport&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">content</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:var(--shiki-color-text);"> /&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    &lt;</span><span style="color:var(--shiki-token-string-expression);">meta</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">http-equiv</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;X-UA-Compatible&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">content</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;ie=edge&quot;</span><span style="color:var(--shiki-color-text);"> /&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">&lt;!-- 最新 CDN：https://unpkg.com/vue@next --&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    &lt;</span><span style="color:var(--shiki-token-string-expression);">script</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">src</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;https://labfile.oss.aliyuncs.com/courses/2495/vue.global.js&quot;</span><span style="color:var(--shiki-color-text);">&gt;&lt;/</span><span style="color:var(--shiki-token-string-expression);">script</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  &lt;/</span><span style="color:var(--shiki-token-string-expression);">head</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">  &lt;</span><span style="color:var(--shiki-token-string-expression);">body</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    &lt;</span><span style="color:var(--shiki-token-string-expression);">div</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">id</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;app&quot;</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      &lt;</span><span style="color:var(--shiki-token-string-expression);">input</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">type</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;text&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">v-model</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;message&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">name</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">id</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);"> /&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      &lt;</span><span style="color:var(--shiki-token-string-expression);">div</span><span style="color:var(--shiki-color-text);">&gt;{{message}}&lt;/</span><span style="color:var(--shiki-token-string-expression);">div</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    &lt;/</span><span style="color:var(--shiki-token-string-expression);">div</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    &lt;</span><span style="color:var(--shiki-token-string-expression);">script</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">createApp</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">ref</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">onBeforeMount</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">onMounted</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">onBeforeUpdate</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">onUpdated</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">onBeforeUnmount</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">onUnmounted</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">onRenderTracked</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">onRenderTriggered</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      } </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> Vue;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">App</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-function);">setup</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">message</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ref</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;LifeCycle Hook!&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;setup&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-function);">onBeforeMount</span><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;onBeforeMount&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-function);">onMounted</span><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;onMounted&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-function);">onBeforeUpdate</span><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;onBeforeUpdate&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-function);">onUpdated</span><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;onUpdated&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-function);">onBeforeUnmount</span><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;onBeforeUnmount&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-function);">onUnmounted</span><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;onUnmounted&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-function);">onRenderTracked</span><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;onRenderTracked&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-function);">onRenderTriggered</span><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;onRenderTriggered&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            message</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          };</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      };</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-function);">createApp</span><span style="color:var(--shiki-color-text);">(App)</span><span style="color:var(--shiki-token-function);">.mount</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;#app&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    &lt;/</span><span style="color:var(--shiki-token-string-expression);">script</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  &lt;/</span><span style="color:var(--shiki-token-string-expression);">body</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">&lt;/</span><span style="color:var(--shiki-token-string-expression);">html</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"></span></code></pre></div></details><h2 id="customref" tabindex="-1">customRef() <a class="header-anchor" href="#customref" aria-hidden="true">#</a></h2><p>自定义 ref，用来显式控制其依赖项的跟踪和更新触发，接收 <code>track()</code> 和 <code>trigger()</code> 作为参数。可以使用这个 API 来控制视图更 新时间，以及动态控制处理设置值.</p><details class="details custom-block"><summary>基本用法</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 显式控制其依赖项跟踪和更新触发</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">TestcustomRef</span><span style="color:var(--shiki-color-text);">(value) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">customRef</span><span style="color:var(--shiki-color-text);">((track</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> trigger) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-function);">get</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-function);">track</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 触发 get 后，控制台打印信息</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;get&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> value);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> value;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-function);">set</span><span style="color:var(--shiki-color-text);">(newValue) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        value </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> newValue </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot; set&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 触发 set 后，控制台打印信息</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;set&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> value);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 可以通过这一步控制视图更新时间</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-function);">setTimeout</span><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-function);">trigger</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    };</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre></div></details><h2 id="markraw" tabindex="-1">markRaw() <a class="header-anchor" href="#markraw" aria-hidden="true">#</a></h2><p><code>markRaw()</code> 方法标记一个对象，使其永远不会被转换为代理（Proxy），而是返回对象本身。</p><details class="details custom-block"><summary>基本用法</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">msg</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">markRaw</span><span style="color:var(--shiki-color-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  value</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;markraw&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">});</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 作为参照</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">op</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">reactive</span><span style="color:var(--shiki-color-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  value</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;reactive&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setmsg</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> () </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// isReactive()：判断一个某个值是否为 reactive() 创建出来的对象</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;markRaw &quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">isReactive</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-function);">reactive</span><span style="color:var(--shiki-color-text);">(msg))); </span><span style="color:var(--shiki-token-comment);">// false</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;reactive &quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">isReactive</span><span style="color:var(--shiki-color-text);">(op)); </span><span style="color:var(--shiki-token-comment);">// true</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">msg</span><span style="color:var(--shiki-color-text);">.value </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(msg); </span><span style="color:var(--shiki-token-comment);">// 一个普通对象</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(op); </span><span style="color:var(--shiki-token-comment);">// 一个经过 Proxy 加工的响应式对象</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span></code></pre></div></details><h2 id="toraw" tabindex="-1">toRaw() <a class="header-anchor" href="#toraw" aria-hidden="true">#</a></h2><p>使一个 proxy 只读对象或者 reactive 对象还原为普通对象，可用于临时读取，而不会引起代理访问/跟踪开销或写入而不会触发更改。</p><details class="details custom-block"><summary>基本用法</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">foo</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {};</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 创建一个响应式对象</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">reactiveFoo</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">reactive</span><span style="color:var(--shiki-color-text);">(foo);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-function);">toRaw</span><span style="color:var(--shiki-color-text);">(reactiveFoo) </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> foo); </span><span style="color:var(--shiki-token-comment);">// true</span></span>
<span class="line"></span></code></pre></div><blockquote><p>官网提醒：不建议持有对原始对象的持久性引用，需要我们谨慎使用这个 API。</p></blockquote></details><hr><h2 id="虚拟-dom" tabindex="-1">虚拟 DOM <a class="header-anchor" href="#虚拟-dom" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">虚拟 DOM</p><p>虚拟 DOM 简称 VNode, 其实是一棵以 JavaScript 对象作为基础的树，是对真实 DOM 的抽象。虚拟 DOM 经过一系列转换可以变成真实 DOM 并渲染到页面上。</p></div><p>我们可以用虚拟 DOM 来描述一个简单的 vue 组件，如下所示：</p><details class="details custom-block"><summary>查看案例</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-string-expression);">template</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  &lt;</span><span style="color:var(--shiki-token-string-expression);">span</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">class</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;demo&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">v-show</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);">&quot;isShow&quot;</span><span style="color:var(--shiki-color-text);">&gt; This is a span. &lt;/</span><span style="color:var(--shiki-token-string-expression);">span</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">&lt;/</span><span style="color:var(--shiki-token-string-expression);">template</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>对应的 VNode 如下：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    tag</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> &#39;span&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    data</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">/* 指令集合数组 */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        directives</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> [</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-comment);">/* v-show指令 */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                rawName</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> &#39;v-show&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                expression</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> &#39;isShow&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                name</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> &#39;show&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                value</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">true</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        ]</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">/* 静态class */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        staticClass</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> &#39;demo&#39;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    text</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> undefined</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    children</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> [</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">/* 子节点是一个文本VNode节点 */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            tag</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> undefined</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            data</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> undefined</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            text</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> &#39;This is a span.&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            children</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> undefined</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    ]</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div></details><hr><h2 id="diff-算法" tabindex="-1">Diff 算法 <a class="header-anchor" href="#diff-算法" aria-hidden="true">#</a></h2><p>对操作前后的 DOM 树同一层的节点进行对比，一层一层对比</p><p><img src="`+e+'" alt="Diff"></p><h2 id="v-for-中-key-的作用" tabindex="-1">v-for 中 key 的作用 <a class="header-anchor" href="#v-for-中-key-的作用" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">:key=&quot;唯一标识&quot;</p><p>v-for 中 key 的作用就是让每个被循环元素有一个唯一的身份标识，这样 Vue 就可以更加精准的追踪到每个元素，从而更加高效的更新 页面。当然如果没有 key 程序也不会报错，只不过此时的程序变得非常的“笨”。</p></div><p>加 key 和不加 key 的区别：</p><details class="details custom-block"><summary>查看图解</summary><blockquote><p><strong>需求：</strong> 把一个数组 [A,B,C] 变成 [A,D,B,C] 同时页面也更新</p><p>不加 key，一共做了两次更新一次插入操作。</p><p><img src="'+l+'" alt="不加key"></p><p>加 key，只执行了一次插入操作。</p><p><img src="'+r+'" alt="加key"></p></blockquote></details><hr><h2 id="vue2-组件通讯" tabindex="-1">Vue2 组件通讯 <a class="header-anchor" href="#vue2-组件通讯" aria-hidden="true">#</a></h2><h2 id="vue3-组件通讯" tabindex="-1">Vue3 组件通讯 <a class="header-anchor" href="#vue3-组件通讯" aria-hidden="true">#</a></h2>',34),c=[i];function k(h,y,v,u,x,d){return o(),n("div",null,c)}const b=s(p,[["render",k]]);export{m as __pageData,b as default};

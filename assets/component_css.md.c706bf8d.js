import{_ as s,c as t,o as e,a}from"./app.12bd6e9c.js";const l="/h-web/html&css/W3C-Box.png",n="/h-web/html&css/IE-Box.png",i="/h-web/html&css/selector.png",m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"文本溢出","slug":"文本溢出","link":"#文本溢出","children":[{"level":3,"title":"单行文本溢出","slug":"单行文本溢出","link":"#单行文本溢出","children":[]},{"level":3,"title":"多行文本溢出","slug":"多行文本溢出","link":"#多行文本溢出","children":[]}]},{"level":2,"title":"元素水平垂直居中","slug":"元素水平垂直居中","link":"#元素水平垂直居中","children":[]},{"level":2,"title":"伪类和伪元素","slug":"伪类和伪元素","link":"#伪类和伪元素","children":[]},{"level":2,"title":"盒模型","slug":"盒模型","link":"#盒模型","children":[]},{"level":2,"title":"常用选择器","slug":"常用选择器","link":"#常用选择器","children":[]},{"level":2,"title":"阻止事件冒泡","slug":"阻止事件冒泡","link":"#阻止事件冒泡","children":[]},{"level":2,"title":"阻止默认行为","slug":"阻止默认行为","link":"#阻止默认行为","children":[]}],"relativePath":"component/css.md"}'),o={name:"component/css.md"},r=a(`<h2 id="文本溢出" tabindex="-1">文本溢出 <a class="header-anchor" href="#文本溢出" aria-hidden="true">#</a></h2><h3 id="单行文本溢出" tabindex="-1">单行文本溢出 <a class="header-anchor" href="#单行文本溢出" aria-hidden="true">#</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">width: 300px;</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">white-space</span><span style="color:var(--shiki-color-text);">: nowrap; // 文本不会换行。</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">overflow: hidden; // 溢出多余裁剪</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">text-overflow</span><span style="color:var(--shiki-color-text);">: ellipsis; // 显示省略符号来代表被修剪的文本。</span></span>
<span class="line"></span></code></pre></div><h3 id="多行文本溢出" tabindex="-1">多行文本溢出 <a class="header-anchor" href="#多行文本溢出" aria-hidden="true">#</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">display: -webkit-box; // 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">-webkit-box-orient: vertical; // 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">-webkit-line-clamp: 3; // 用来限制在一个块元素显示的文本的行数，根据需要写。</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">overflow: hidden; // 溢出多余裁剪</span></span>
<span class="line"></span></code></pre></div><hr><h2 id="元素水平垂直居中" tabindex="-1">元素水平垂直居中 <a class="header-anchor" href="#元素水平垂直居中" aria-hidden="true">#</a></h2><ol><li><p><strong>水平居中</strong></p><p>行内元素： <code>text-align: center</code></p><p>块级元素：<code>margin: 0 auto</code></p><p>通用：<code>absolute + transform</code></p><p>通用：<code>flex + justify-content: center</code></p></li><li><p><strong>垂直居中</strong></p><p>行内元素：<code>line-height: height</code></p><p>通用：<code>absolute + transform</code></p><p>通用：<code>flex + align-items: center</code></p><p>通用：<code>table</code></p></li><li><p><strong>div 上下左右居中</strong></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">// 整个div定位</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">position: absolute;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">left: 50%;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">top: 50%;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">// 根据自身div大小偏移</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">transform: translate(-50%</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> -50%);</span></span>
<span class="line"></span></code></pre></div></li></ol><hr><h2 id="伪类和伪元素" tabindex="-1">伪类和伪元素 <a class="header-anchor" href="#伪类和伪元素" aria-hidden="true">#</a></h2><p><strong>CSS3 规定用于区分伪元素，伪类使用 <code>:</code> 伪元素使用 <code>::</code> 。</strong></p><div class="tip custom-block"><p class="custom-block-title">伪类</p><p>用于已有元素处于某种状态时为其添加对应的样式，这个状态是根据用户行为而动态变化的。主要是用来描述用户的行为。</p></div><div class="vp-table__container"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>:active</td><td>向被激活的元素添加样式。</td></tr><tr><td>:focus</td><td>向拥有键盘输入焦点的元素添加样式。</td></tr><tr><td>:hover</td><td>当鼠标悬浮在元素上方时，向元素添加样式。</td></tr><tr><td>:link</td><td>向未被访问的链接添加样式。</td></tr><tr><td>:visited</td><td>向已被访问的链接添加样式。</td></tr><tr><td>:first-child</td><td>向元素的第一个子元素添加样式。</td></tr><tr><td>:lang</td><td>向带有指定 lang 属性的元素添加样式。</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">伪元素</p><p>用于创建一些不在 DOM 树中的元素，并为其添加样式。主要用于扩展 DOM。一些简单的样式可以用伪元素实现，减少项目中图片资源的 请求。</p></div><div class="vp-table__container"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>::first-letter</td><td>向文本的第一个字母添加特殊样式。</td></tr><tr><td>::first-line</td><td>向文本的首行添加特殊样式。</td></tr><tr><td>::before</td><td>在元素之前添加内容。</td></tr><tr><td>::after</td><td>在元素之后添加内容。</td></tr></tbody></table></div><hr><h2 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">W3C 标准盒模型</p><p>内容的宽度 = 设置的宽度(width)</p><p>盒子的宽度 = 内容的宽度 + 内边距(padding)*2 + 外边框(border)*2</p></div><details class="details custom-block"><summary>查看示例图</summary><p><img src="`+l+'" alt="W3C盒模型"></p></details><div class="tip custom-block"><p class="custom-block-title">IE 盒模型</p><p>内容的宽度 = 设置的宽度(width) - 内边距(padding)*2 - 外边框(border)*2</p><p>盒子的宽度 = 设置的宽度(width)</p></div><details class="details custom-block"><summary>查看示例图</summary><p><img src="'+n+'" alt="IE盒模型"></p></details><p><strong>总结：</strong> 默认是标准盒模型，当设置 <code>box-sizing: border-box</code> 时，div 就会变成 IE 盒模型。两种盒模型的区别就是有没有把 padding 和 border 包含在内（不包含 margin），如果包含在内就是 IE 盒模型，否则就是标准盒模型。</p><hr><h2 id="常用选择器" tabindex="-1">常用选择器 <a class="header-anchor" href="#常用选择器" aria-hidden="true">#</a></h2><p><img src="'+i+'" alt="选择器"></p><h2 id="阻止事件冒泡" tabindex="-1">阻止事件冒泡 <a class="header-anchor" href="#阻止事件冒泡" aria-hidden="true">#</a></h2><ul><li>event.stopPropagation()</li></ul><h2 id="阻止默认行为" tabindex="-1">阻止默认行为 <a class="header-anchor" href="#阻止默认行为" aria-hidden="true">#</a></h2><ul><li>event.preventDefault() // 比如 a 链接，阻止跳转这种</li></ul>',29),c=[r];function d(p,h,v,u,b,g){return e(),t("div",null,c)}const x=s(o,[["render",d]]);export{m as __pageData,x as default};

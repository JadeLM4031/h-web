import{_ as s,c as n,o,a}from"./app.6a4aab15.js";const x=JSON.parse('{"title":"实现深拷贝","description":"","frontmatter":{},"headers":[{"level":2,"title":"最简单版本","slug":"最简单版本","link":"#最简单版本","children":[]},{"level":2,"title":"基础版本","slug":"基础版本","link":"#基础版本","children":[{"level":3,"title":"处理数组、日期、正则、null","slug":"处理数组、日期、正则、null","link":"#处理数组、日期、正则、null","children":[]}]}],"relativePath":"code/cloneDeep.md"}'),t={name:"code/cloneDeep.md"},l=a(`<h1 id="实现深拷贝" tabindex="-1">实现深拷贝 <a class="header-anchor" href="#实现深拷贝" aria-hidden="true">#</a></h1><h2 id="最简单版本" tabindex="-1">最简单版本 <a class="header-anchor" href="#最简单版本" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.parse</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.stringify</span><span style="color:var(--shiki-color-text);">(obj));</span></span>
<span class="line"></span></code></pre></div><p>适用于拷贝简单对象，且要注意使用后不会出现副作用。</p><blockquote><p>这种方式存在弊端：</p><ol><li>会忽略 undefined、Symbol 和函数</li><li>NaN、Infinity、-Infinity 也会被转化为 null</li><li>如果出现循环引用，此方法会直接报错</li></ol></blockquote><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">/* 正常代码 */</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  person</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;lin&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newObj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.parse</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.stringify</span><span style="color:var(--shiki-color-text);">(obj)); </span><span style="color:var(--shiki-token-comment);">// 深拷贝</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">person</span><span style="color:var(--shiki-color-text);">.name </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;xxx&quot;</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 改变原来的深层对象</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newObj); </span><span style="color:var(--shiki-token-comment);">// { person: { name: &#39;lin&#39; } } 新的深层对象不变</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">/* 问题1 */</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  a</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">undefined</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  b</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Symbol</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;b&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">c</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {}</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newObj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.parse</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.stringify</span><span style="color:var(--shiki-color-text);">(obj));</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newObj); </span><span style="color:var(--shiki-token-comment);">// {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">/* 问题2 */</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  a</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">NaN</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  b</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Infinity</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  c</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">Infinity</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newObj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.parse</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.stringify</span><span style="color:var(--shiki-color-text);">(obj));</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newObj); </span><span style="color:var(--shiki-token-comment);">// { a: null, b: null, c: null }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">/* 问题3 */</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  a</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);">.obj </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> obj;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newObj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.parse</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.stringify</span><span style="color:var(--shiki-color-text);">(obj)); </span><span style="color:var(--shiki-token-comment);">// Uncaught TypeError: Converting circular structure to JSON</span></span>
<span class="line"></span></code></pre></div></details><h2 id="基础版本" tabindex="-1">基础版本 <a class="header-anchor" href="#基础版本" aria-hidden="true">#</a></h2><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">deepClone</span><span style="color:var(--shiki-color-text);">(target) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">typeof</span><span style="color:var(--shiki-color-text);"> target </span><span style="color:var(--shiki-token-keyword);">!==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;object&quot;</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 如果是原始类型，无需继续拷贝，直接返回</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> target;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// 如果是引用类型，递归实现每一层的拷贝</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">cloneTarget</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {}; </span><span style="color:var(--shiki-token-comment);">// 定义一个克隆对象</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">key</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">in</span><span style="color:var(--shiki-color-text);"> target) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 遍历原对象</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    cloneTarget[key] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">deepClone</span><span style="color:var(--shiki-color-text);">(target[key]); </span><span style="color:var(--shiki-token-comment);">// 递归拷贝每一层</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> cloneTarget; </span><span style="color:var(--shiki-token-comment);">// 返回克隆对象</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre></div></details><h3 id="处理数组、日期、正则、null" tabindex="-1">处理数组、日期、正则、null <a class="header-anchor" href="#处理数组、日期、正则、null" aria-hidden="true">#</a></h3><p>上述基础版本没有处理 null 这种原始类型，也没有处理数组、日期和正则这些比较常用的 引用类型。如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  a</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> []</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  b</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Date</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  c</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-token-string-expression);"> /abc/</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  d</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span></code></pre></div><p>优化后的代码如下：</p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">deepClone</span><span style="color:var(--shiki-color-text);">(target) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (target </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> target; </span><span style="color:var(--shiki-token-comment);">// 处理 null</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (target </span><span style="color:var(--shiki-token-keyword);">instanceof</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Date</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Date</span><span style="color:var(--shiki-color-text);">(target); </span><span style="color:var(--shiki-token-comment);">// 处理日期</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (target </span><span style="color:var(--shiki-token-keyword);">instanceof</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">RegExp</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">RegExp</span><span style="color:var(--shiki-color-text);">(target); </span><span style="color:var(--shiki-token-comment);">// 处理正则</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">typeof</span><span style="color:var(--shiki-color-text);"> target </span><span style="color:var(--shiki-token-keyword);">!==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;object&quot;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> target; </span><span style="color:var(--shiki-token-comment);">// 处理原始类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// 处理对象和数组</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">cloneTarget</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">target</span><span style="color:var(--shiki-token-function);">.constructor</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 创建一个新的克隆对象或克隆数组</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">key</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">in</span><span style="color:var(--shiki-color-text);"> target) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 递归拷贝每一层</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    cloneTarget[key] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">deepClone</span><span style="color:var(--shiki-color-text);">(target[key]);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> cloneTarget;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">---------------------------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">&lt;!--</span><span style="color:var(--shiki-color-text);"> 代码解释 </span><span style="color:var(--shiki-token-keyword);">--&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">cloneTarget</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">target</span><span style="color:var(--shiki-token-function);">.constructor</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 创建一个新的克隆对象或克隆数组</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">深拷贝函数里，就不用在拷贝时去判断数组类型了，原对象是对象，就创建一个新的克隆对象，原对象是数组，就创建一个新的克隆数组。</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Person</span><span style="color:var(--shiki-color-text);"> {}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">p1</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Person</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">p1</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">constructor</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> Person); </span><span style="color:var(--shiki-token-comment);">// true</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">([].</span><span style="color:var(--shiki-token-constant);">constructor</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> Array); </span><span style="color:var(--shiki-token-comment);">// true</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">({}.</span><span style="color:var(--shiki-token-constant);">constructor</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> Object); </span><span style="color:var(--shiki-token-comment);">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> {}</span><span style="color:var(--shiki-token-function);">.constructor</span><span style="color:var(--shiki-color-text);">()); </span><span style="color:var(--shiki-token-comment);">// {}</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">等价于;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Object</span><span style="color:var(--shiki-color-text);">()); </span><span style="color:var(--shiki-token-comment);">// {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> []</span><span style="color:var(--shiki-token-function);">.constructor</span><span style="color:var(--shiki-color-text);">()); </span><span style="color:var(--shiki-token-comment);">// {}</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">等价于;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Array</span><span style="color:var(--shiki-color-text);">()); </span><span style="color:var(--shiki-token-comment);">// []</span></span>
<span class="line"></span></code></pre></div></details>`,13),e=[l];function r(p,i,c,k,y,h){return o(),n("div",null,e)}const d=s(t,[["render",r]]);export{x as __pageData,d as default};

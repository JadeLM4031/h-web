import{_ as s,c as n,o,a}from"./app.331b49cb.js";const x=JSON.parse('{"title":"实现 async 函数","description":"","frontmatter":{},"headers":[{"level":2,"title":"本节介绍","slug":"本节介绍","link":"#本节介绍","children":[]},{"level":2,"title":"题解","slug":"题解","link":"#题解","children":[]},{"level":2,"title":"题解分析","slug":"题解分析","link":"#题解分析","children":[{"level":3,"title":"Generator 函数","slug":"generator-函数","link":"#generator-函数","children":[]},{"level":3,"title":"协程","slug":"协程","link":"#协程","children":[]},{"level":3,"title":"async 函数的实现原理","slug":"async-函数的实现原理","link":"#async-函数的实现原理","children":[]}]},{"level":2,"title":"本节总结","slug":"本节总结","link":"#本节总结","children":[]}],"relativePath":"code/async.md"}'),t={name:"code/async.md"},l=a(`<h1 id="实现-async-函数" tabindex="-1">实现 async 函数 <a class="header-anchor" href="#实现-async-函数" aria-hidden="true">#</a></h1><h2 id="本节介绍" tabindex="-1">本节介绍 <a class="header-anchor" href="#本节介绍" aria-hidden="true">#</a></h2><p>本节是“实现 <code>async</code> 函数”这道题的讲解，按理来说，我们之前的章节不管是广度还是深 度，对于 JavaScript 异步的学习已经足够了，但是为了防止某些面试场景中面试官对 <code>async/await</code> 的原理进行深挖，我们就通过这道题来浅尝辄止地介绍一下 <code>async/await</code> 的底层原理，大家了解即可，不必深挖。</p><h4 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-hidden="true">#</a></h4><ul><li>async/await</li><li>Generator</li></ul><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-hidden="true">#</a></h2><p>在讲解之前，先给出本题的答案，代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">myAsync</span><span style="color:var(--shiki-color-text);">(genFn) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (resolve</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> reject) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">gen</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">genFn</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">step</span><span style="color:var(--shiki-color-text);">(nextFn) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> next;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        next </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">nextFn</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      } </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">reject</span><span style="color:var(--shiki-color-text);">(e);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">next</span><span style="color:var(--shiki-color-text);">.done) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">resolve</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">next</span><span style="color:var(--shiki-color-text);">.value);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-token-function);">.resolve</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">next</span><span style="color:var(--shiki-color-text);">.value)</span><span style="color:var(--shiki-token-function);">.then</span><span style="color:var(--shiki-color-text);">(</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (v) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-function);">step</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">gen</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">(v);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-function);">step</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">gen</span><span style="color:var(--shiki-token-function);">.throw</span><span style="color:var(--shiki-color-text);">(e);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      );</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-function);">step</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">gen</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre></div><h2 id="题解分析" tabindex="-1">题解分析 <a class="header-anchor" href="#题解分析" aria-hidden="true">#</a></h2><p>之前我们讲过，<code>async/await</code> 是 <code>Promise</code> 的语法糖，但其实并不完全准确，准确地来 说，<code>async</code> 函数其实是 <code>Generator</code> 函数的语法糖，那么我们先从 <code>Generator</code> 函数讲 起。</p><h3 id="generator-函数" tabindex="-1">Generator 函数 <a class="header-anchor" href="#generator-函数" aria-hidden="true">#</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator" target="_blank" rel="noreferrer">Generator</a> 函数是 ES6 提供的一种异步编程解决方案，它是可以用来控 制<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators#%E8%BF%AD%E4%BB%A3%E5%99%A8" target="_blank" rel="noreferrer">迭代器</a>的 函数，并且语法与传统的函数完全不同，我们来看下面这个示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">printNum</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">printNum</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 程序最终依次输出 1，2，3</span></span>
<span class="line"></span></code></pre></div><p>这是一个正常的函数，如果我们把这个函数改造成 <code>Generator</code> 函数，代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function*</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">printNum</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">yield</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">yield</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">yield</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">printNum</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 这样执行不会有任何反应</span></span>
<span class="line"></span></code></pre></div><p>此时执行 <code>printNum</code>，不会有任何反应，加上了 <code>yield</code> 关键字后，程序中的打印逻辑都 被中断了。</p><p>我们需要调用函数返回值的 <code>next</code> 方法，才会生效，代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function*</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">printNum</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">yield</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">yield</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">yield</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">fn </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">printNum</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">fn</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 打印 1</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">fn</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 打印 2</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">fn</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 打印 3</span></span>
<span class="line"></span></code></pre></div><p>这样，程序的执行就会变得<strong>可控</strong>，它们可以暂停，然后在需要的时候恢复，小结一下：</p><ul><li><code>Generator</code> 函数比普通函数多一个 <code>*</code>。</li><li>函数内部用 <code>yield</code> 来控制暂停代码的执行。</li><li>函数的返回值通过调用 <code>next</code> 来恢复代码的执行。</li></ul><p>那么问题来了，<code>Generator</code> 函数是如何让函数暂停和恢复的呢？其实这涉及 到<a href="https://baike.baidu.com/item/%E5%8D%8F%E7%A8%8B/8652240" target="_blank" rel="noreferrer">协程</a>的概念。</p><h3 id="协程" tabindex="-1">协程 <a class="header-anchor" href="#协程" aria-hidden="true">#</a></h3><p>传统的编程语言，早有异步编程的解决方案（其实是多任务的解决方案）。其中有一种叫做 &quot;协程&quot;（coroutine），意思是多个线程互相协作，完成异步任务。</p><p>协程有点像函数，又有点像线程。它的运行流程大致如下：</p><p>第一步，协程 A 开始执行。</p><p>第二步，协程 A 执行到一半，进入暂停，执行权转移到协程 B。</p><p>第三步，（一段时间后）协程 B 交还执行权。</p><p>第四步，协程 A 恢复执行。</p><p>上面流程的协程 A，就是异步任务，因为它分成两段（或多段）执行。</p><p>举例来说，读取文件的协程写法如下。</p><p>我们以实际的代码来举例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function*</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">A</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;A&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">yield</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">B</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 暂停 A，执行 B</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;end&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">B</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;B&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// B 执行完了，返回，继续执行 A</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> gen </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">A</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">gen</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">gen</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// A</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// B</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// end</span></span>
<span class="line"></span></code></pre></div><p>上面代码的函数 <code>A</code> 是一个协程，它的奥妙就在其中的 <code>yield</code> 命令。它表示执行到此处 ，执行权将交给其他协程。也就是说，<code>yield</code> 命令是异步两个阶段的分界线。</p><p>协程遇到 <code>yield</code> 命令就暂停，等到执行权返回，再从暂停的地方继续往后执行。它的最 大优点，就是代码的写法非常像同步操作，如果去除 <code>yield</code> 命令，简直一模一样。</p><p>协程并不受操作系统的控制，完全由用户自定义切换，因此并没有进程/线程上下文切换的 开销，这是高性能的重要原因。著名前端框架 React 中，就有对协程的大量应用，React Fiber 将虚拟 DOM 由树结构转为链表结构，如果 diff 计算超过了 16.6ms（60 fps 显示 器的一帧），就可以随时中断，减少程序的卡顿。</p><h3 id="async-函数的实现原理" tabindex="-1">async 函数的实现原理 <a class="header-anchor" href="#async-函数的实现原理" aria-hidden="true">#</a></h3><p>我们知道了 <code>Generator</code> 函数的用法，现在用它来处理异步，代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">fs</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">require</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;fs&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">readFile</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (fileName) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (resolve</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> reject) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">fs</span><span style="color:var(--shiki-token-function);">.readFile</span><span style="color:var(--shiki-color-text);">(fileName</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (error</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> data) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (error) </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">reject</span><span style="color:var(--shiki-color-text);">(error);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-function);">resolve</span><span style="color:var(--shiki-color-text);">(data);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">genFn</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function*</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">a</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">yield</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">readFile</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;a.json&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">b</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">yield</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">readFile</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;b.json&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.parse</span><span style="color:var(--shiki-color-text);">(a));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.parse</span><span style="color:var(--shiki-color-text);">(b));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span></code></pre></div><p>上面代码的函数 <code>genFn</code> 可以写成 <code>async</code> 函数，就是下面这样。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">asyncReadFile</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">a</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">readFile</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;a.json&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">b</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">readFile</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;b.json&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.parse</span><span style="color:var(--shiki-color-text);">(a));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-function);">.parse</span><span style="color:var(--shiki-color-text);">(b));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span></code></pre></div><p>一比较就会发现，<code>async</code> 函数就是将 <code>Generator</code> 函数的星号（*）替换成 <code>async</code>， 将 <code>yield</code> 替换成 <code>await</code>，仅此而已。</p><p>但是 <code>Generator</code> 函数的执行，每一步都要执行 <code>next</code> 方法，非常不方便，能不能让它 一次性执行完毕呢？</p><p>上文中的 <code>genFn</code> 方法，我们让他执行完，代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> g </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">genFn</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// next返回值中有一个 value 值，这个 value 是 yield 后面的结果</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">g</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-function);">.value</span><span style="color:var(--shiki-color-text);">((err</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> data1) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">g</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">(data1)</span><span style="color:var(--shiki-token-function);">.value</span><span style="color:var(--shiki-color-text);">((err</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> data2) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">g</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">(data2);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">});</span></span>
<span class="line"></span></code></pre></div><p>注意这里的 <code>value</code> 值，是调用 <code>next</code> 方法生成的，比如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function*</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">printNum</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">yield</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">yield</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">fn </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">printNum</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">fn</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">()); </span><span style="color:var(--shiki-token-comment);">// {value: 1, done: false}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">fn</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">()); </span><span style="color:var(--shiki-token-comment);">// {value: 2, done: false}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">fn</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">()); </span><span style="color:var(--shiki-token-comment);">// {value: 3, done: true}</span></span>
<span class="line"></span></code></pre></div><p>当调用 <code>next</code> 方法时，返回一个对象，它的 <code>value</code> 属性就是当前 <code>yield</code> 表达式的值 ，<code>done</code> 属性的值表示遍历是否结束。</p><p>上文的 <code>genFn</code> 方法中，我们只执行了两个异步操作，万一异步操作多起来，又会陷入回 调地狱了，我们把这里的逻辑封装一下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">step</span><span style="color:var(--shiki-color-text);">(nextFn) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">next</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (err</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> data) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> res </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">nextFn</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">(data);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 如果 res.done 为 true，才表示迭代结束，返回</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">res</span><span style="color:var(--shiki-color-text);">.done) </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 否则执行递归的逻辑</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">res</span><span style="color:var(--shiki-token-function);">.value</span><span style="color:var(--shiki-color-text);">(next);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  };</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">next</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">step</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-function);">genFn</span><span style="color:var(--shiki-color-text);">());</span></span>
<span class="line"></span></code></pre></div><p>这里有一个递归的过程，我们把这一步封装称为自动执行 <code>Generator</code> 函数。</p><p>而 <code>async</code> 函数的实现原理，就是将 <code>Generator</code> 函数和自动执行器，包装在一个函数里 。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">fn</span><span style="color:var(--shiki-color-text);">(args) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// ...</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 等同于</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">fn</span><span style="color:var(--shiki-color-text);">(args) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">myAsync</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function*</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// ...</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre></div><p>我们介绍了这么多，终于回到了本题的 <code>myAsync</code> 函数，本题我们要实现 <code>async</code> 的功能 ，就需要返回一个<code>Promise</code> 实例，把 <code>Generator</code> 函数中状态为 <code>done</code> 的值 <code>resolve</code> 出来，把错误的信息 <code>reject</code> 出来，最终代码实现如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">myAsync</span><span style="color:var(--shiki-color-text);">(genFn) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// 返回一个 Promise 实例</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (resolve</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> reject) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">gen</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">genFn</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 自动执行器的封装，里面是递归的逻辑</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">step</span><span style="color:var(--shiki-color-text);">(nextFn) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> next;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-comment);">//</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        next </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">nextFn</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      } </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">reject</span><span style="color:var(--shiki-color-text);">(e);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-comment);">// 如果已经到 done 状态了，就 resolve 最终的值</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">next</span><span style="color:var(--shiki-color-text);">.done) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">resolve</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">next</span><span style="color:var(--shiki-color-text);">.value);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-comment);">// 不是 done 状态，说明程序还没执行完，就继续递归</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-token-function);">.resolve</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">next</span><span style="color:var(--shiki-color-text);">.value)</span><span style="color:var(--shiki-token-function);">.then</span><span style="color:var(--shiki-color-text);">(</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (v) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-function);">step</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">gen</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">(v);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-comment);">// 错误的逻辑 reject 出来</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          </span><span style="color:var(--shiki-token-function);">step</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">gen</span><span style="color:var(--shiki-token-function);">.throw</span><span style="color:var(--shiki-color-text);">(e);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      );</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-function);">step</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">gen</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre></div><p>这样我们就实现了 <code>myAsync</code> 函数，但实现这个函数并不是重点，重点是学习 <code>Generator</code> 函数的用法以及理解 <code>async</code> 是如何通过 <code>Generator</code> 函数来实现的。</p><h2 id="本节总结" tabindex="-1">本节总结 <a class="header-anchor" href="#本节总结" aria-hidden="true">#</a></h2><p>本节大量参考了<a href="https://www.ruanyifeng.com/" target="_blank" rel="noreferrer">阮一峰老师</a>的《ES6 标准入门》的 <code>Generator</code> 函数章节，但他在书中讲的概念实在太细太多，我只介绍了其中的一些重点内 容，如果对这一块儿还想有更深的了解，可以直接去读原文。</p><ul><li><a href="https://book.douban.com/subject/27127030/" target="_blank" rel="noreferrer">纸质书</a></li><li><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noreferrer">电子书</a></li></ul><p>本节实验主要给大家介绍了 <code>async/await</code> 和 <code>Generator</code>，希望同学们好好消化，如果 有觉得学得比较迷糊的点，就再多去看几遍。</p>`,59),e=[l];function r(p,i,c,k,y,h){return o(),n("div",null,e)}const d=s(t,[["render",r]]);export{x as __pageData,d as default};

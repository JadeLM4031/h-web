import{_ as s,c as o,o as a,a as n}from"./app.b772827b.js";const t="/h-web/javascript/demo-prototype.png",l="/h-web/javascript/proto-process.png",e="/h-web/javascript/this.png",r="/h-web/javascript/macrotask.png",i="/h-web/javascript/microtask.png",p="/h-web/javascript/message-loop.png",f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"基本类型","slug":"基本类型","link":"#基本类型","children":[]},{"level":3,"title":"引用类型","slug":"引用类型","link":"#引用类型","children":[]},{"level":3,"title":"两种数据类型的区别","slug":"两种数据类型的区别","link":"#两种数据类型的区别","children":[]}]},{"level":2,"title":"深拷贝 & 浅拷贝","slug":"深拷贝-浅拷贝","link":"#深拷贝-浅拷贝","children":[]},{"level":2,"title":"原型及原型链","slug":"原型及原型链","link":"#原型及原型链","children":[{"level":3,"title":"函数.prototype.constructor === 函数","slug":"函数-prototype-constructor-函数","link":"#函数-prototype-constructor-函数","children":[]},{"level":3,"title":"实例对象.__proto__ === 函数.prototype","slug":"实例对象-proto-函数-prototype","link":"#实例对象-proto-函数-prototype","children":[]},{"level":3,"title":"原型链执行流程","slug":"原型链执行流程","link":"#原型链执行流程","children":[]}]},{"level":2,"title":"var、let、const 的区别","slug":"var、let、const-的区别","link":"#var、let、const-的区别","children":[]},{"level":2,"title":"改变函数上下文的 this","slug":"改变函数上下文的-this","link":"#改变函数上下文的-this","children":[{"level":3,"title":"call","slug":"call","link":"#call","children":[]},{"level":3,"title":"apply","slug":"apply","link":"#apply","children":[]},{"level":3,"title":"bind","slug":"bind","link":"#bind","children":[]}]},{"level":2,"title":"暂时性死区","slug":"暂时性死区","link":"#暂时性死区","children":[]},{"level":2,"title":"作用域 & 闭包","slug":"作用域-闭包","link":"#作用域-闭包","children":[{"level":3,"title":"闭包","slug":"闭包","link":"#闭包","children":[]}]},{"level":2,"title":"ES6 新特性","slug":"es6-新特性","link":"#es6-新特性","children":[]},{"level":2,"title":"ES2018 (ES9)","slug":"es2018-es9","link":"#es2018-es9","children":[]},{"level":2,"title":"ES2019 (ES10)","slug":"es2019-es10","link":"#es2019-es10","children":[]},{"level":2,"title":"ES2020 (ES11)","slug":"es2020-es11","link":"#es2020-es11","children":[]},{"level":2,"title":"宏任务 & 微任务 （老）","slug":"宏任务-微任务-老","link":"#宏任务-微任务-老","children":[{"level":3,"title":"宏任务","slug":"宏任务","link":"#宏任务","children":[]},{"level":3,"title":"微任务","slug":"微任务","link":"#微任务","children":[]}]},{"level":2,"title":"消息队列 & 微队列（新）","slug":"消息队列-微队列-新","link":"#消息队列-微队列-新","children":[]},{"level":2,"title":"map 和 forEach 的区别","slug":"map-和-foreach-的区别","link":"#map-和-foreach-的区别","children":[]},{"level":2,"title":"for...in & for...of","slug":"for-in-for-of","link":"#for-in-for-of","children":[]},{"level":2,"title":"Set、Map、WeakSet 和 WeakMap 的区别","slug":"set、map、weakset-和-weakmap-的区别","link":"#set、map、weakset-和-weakmap-的区别","children":[]},{"level":2,"title":"内存泄漏的几种情况","slug":"内存泄漏的几种情况","link":"#内存泄漏的几种情况","children":[]},{"level":2,"title":"Promise.all 方法","slug":"promise-all-方法","link":"#promise-all-方法","children":[]},{"level":2,"title":"Promise.race 方法","slug":"promise-race-方法","link":"#promise-race-方法","children":[]},{"level":2,"title":"-----------内置对象--------------","slug":"内置对象","link":"#内置对象","children":[]},{"level":2,"title":"数学对象","slug":"数学对象","link":"#数学对象","children":[]},{"level":2,"title":"日期对象","slug":"日期对象","link":"#日期对象","children":[]},{"level":2,"title":"数组对象——常用方法","slug":"数组对象——常用方法","link":"#数组对象——常用方法","children":[]},{"level":2,"title":"字符串对象——常用方法","slug":"字符串对象——常用方法","link":"#字符串对象——常用方法","children":[]},{"level":2,"title":"-------------问题----------------","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"如何理解 JS 的异步？","slug":"如何理解-js-的异步","link":"#如何理解-js-的异步","children":[]},{"level":2,"title":"阐述一下 JS 的事件循环","slug":"阐述一下-js-的事件循环","link":"#阐述一下-js-的事件循环","children":[]},{"level":2,"title":"JS 中的计时器能做到精确计时吗？为什么？","slug":"js-中的计时器能做到精确计时吗-为什么","link":"#js-中的计时器能做到精确计时吗-为什么","children":[]},{"level":2,"title":"-----javascript 骚操作-----","slug":"javascript-骚操作","link":"#javascript-骚操作","children":[]},{"level":2,"title":"交换数组中的两项值","slug":"交换数组中的两项值","link":"#交换数组中的两项值","children":[]}],"relativePath":"component/javascript.md"}'),c={name:"component/javascript.md"},k=n(`<h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-hidden="true">#</a></h2><h3 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-hidden="true">#</a></h3><ul><li>string（字符串）</li><li>boolean （布尔）</li><li>number（数字）</li><li>undefined（undefined）</li><li>null（null）</li><li>symbol（代表创建后独一无二且不可变的数据类型）</li></ul><h3 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-hidden="true">#</a></h3><ul><li>Object（对象）</li><li>Array（数组）</li><li>Function（函数）</li></ul><h3 id="两种数据类型的区别" tabindex="-1">两种数据类型的区别 <a class="header-anchor" href="#两种数据类型的区别" aria-hidden="true">#</a></h3><ol><li><p>存放位置不同</p><blockquote><p>基本数据类型变量存放在<strong>栈内存</strong>中，如果在一个函数中声明基本类型的变量，则 函数执行完毕，变量自动销毁。</p><p>引用类型的变量名保存在<strong>栈内存</strong>中，变量值存储在<strong>堆内存</strong>，引用类型的变量 不会自动销毁，当没有引用变量引用它时，系统的垃圾回收机制会回收它。</p></blockquote><details class="details custom-block"><summary>堆栈区别</summary><blockquote><ol><li>堆空间大，栈运行速度快。</li><li>堆内存是无序存储，可以根据引用直接获取。</li><li>基础数据类型比较稳定，相对来说占用的内存小。</li><li>引用数据类型大小是动态的，而且是无限的。</li></ol></blockquote></details></li><li><p>赋值不同</p><blockquote><p>基本类型的赋值相当于<strong>深拷贝</strong>，赋值后又开辟一个新的内存空间，两者互不影响 。</p><p>引用类型赋值相当于<strong>浅拷贝</strong>，对对象进行操作时，操作的只是对象的引用。</p></blockquote></li></ol><hr><h2 id="深拷贝-浅拷贝" tabindex="-1">深拷贝 &amp; 浅拷贝 <a class="header-anchor" href="#深拷贝-浅拷贝" aria-hidden="true">#</a></h2><p><strong>浅拷贝</strong>: (拷贝一层) 如果对象的属性是基本类型，拷贝的就是基本类型的值,如果属性 是引用类型, 拷贝的就是内存地址,两个对象用的是同一个内存,修改其中一个的值,另一个 也跟着改变.</p><p><strong>深拷贝</strong>: (拷贝全部层级)只有内存地址不一样,其他完全一样,修改之后不会影响到原来 的对象.</p><p><strong>实现浅拷贝的方法:</strong></p><ul><li><p><code>Object.assign</code>（对象、数组）</p><blockquote><p>参数：</p><p>target---&gt;目标对象</p><p>source---&gt;源对象</p><p>返回值 ：target，即目标对象</p></blockquote><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">&lt;!--</span><span style="color:var(--shiki-color-text);"> 对象 </span><span style="color:var(--shiki-token-keyword);">--&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;lin&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newObj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.assign</span><span style="color:var(--shiki-color-text);">({}</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> obj);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);">.name </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;xxx&quot;</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 改变原来的对象</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newObj); </span><span style="color:var(--shiki-token-comment);">// { name: &#39;lin&#39; } 新对象不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(obj </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newObj); </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">&lt;!--</span><span style="color:var(--shiki-color-text);"> 数组 </span><span style="color:var(--shiki-token-keyword);">--&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newArr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.assign</span><span style="color:var(--shiki-color-text);">([]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> arr);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">arr[</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">100</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 改变原来的数组</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newArr); </span><span style="color:var(--shiki-token-comment);">// [1, 2, 3] // 新数组不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(arr </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newArr); </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><code>扩展运算符</code>（对象、数组）</p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">&lt;!--</span><span style="color:var(--shiki-color-text);"> 对象 </span><span style="color:var(--shiki-token-keyword);">--&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;lin&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newObj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> { </span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">obj };</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);">.name </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;xxx&quot;</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 改变原来的对象</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newObj); </span><span style="color:var(--shiki-token-comment);">// { name: &#39;lin&#39; } // 新对象不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(obj </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newObj); </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">&lt;!--</span><span style="color:var(--shiki-color-text);"> 数组 </span><span style="color:var(--shiki-token-keyword);">--&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newArr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">arr];</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">arr[</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">100</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 改变原来的数组</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newArr); </span><span style="color:var(--shiki-token-comment);">// [1, 2, 3] // 新数组不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(arr </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newArr); </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><code>slice</code>（数组）</p><blockquote><p>参数:</p><p>start:开始位置的索引</p><p>end:结束位置的索引(但不包含该索引位置的元素)</p></blockquote><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">]</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newArr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.slice</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">arr[</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">100</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 改变原来的数组</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newArr) </span><span style="color:var(--shiki-token-comment);">// [1, 2, 3] // 新数组不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(arr </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newArr) </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><code>concat</code>（数组）</p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">]</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newArr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> []</span><span style="color:var(--shiki-token-function);">.concat</span><span style="color:var(--shiki-color-text);">(arr)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">arr[</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">100</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 改变原来的数组</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newArr) </span><span style="color:var(--shiki-token-comment);">// [1, 2, 3] // 新数组不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(arr </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newArr) </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><code>Array.from</code>（数组）</p><blockquote><p>将一个类数组对象（有 length 属性的）或者可遍历对象转换成一个真正的数组</p></blockquote><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">]</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">newArr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Array</span><span style="color:var(--shiki-token-function);">.from</span><span style="color:var(--shiki-color-text);">(arr)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">arr[</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">100</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 改变原来的数组</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(newArr) </span><span style="color:var(--shiki-token-comment);">// [1, 2, 3] // 新数组不变</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(arr </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> newArr) </span><span style="color:var(--shiki-token-comment);">// false 两者指向不同地址</span></span>
<span class="line"></span></code></pre></div></details></li></ul><hr><h2 id="原型及原型链" tabindex="-1">原型及原型链 <a class="header-anchor" href="#原型及原型链" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">介绍</p><p>每个函数都有 <code>prototype</code> 属性，每个对象都有 <code>__proto__</code> 属性(这个属性称之为原型 )，在我们执行 new 的时候，对象的 <code>__proto__</code> 指向这个构造函数的 <code>prototype</code></p></div><h3 id="函数-prototype-constructor-函数" tabindex="-1">函数.prototype.constructor === 函数 <a class="header-anchor" href="#函数-prototype-constructor-函数" aria-hidden="true">#</a></h3><p>每个函数都有个 prototype 属性，这个属性指向函数的原型对象，同时 prototype 里面有 个 constructor 属性回指到该函数。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Demo</span><span style="color:var(--shiki-color-text);">() {}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Demo</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">constructor</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> Demo </span><span style="color:var(--shiki-token-comment);">// true</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block"><summary>查看 Demo.prototype 结构</summary><p><img src="`+t+`" alt="Demo.prototype"></p></details><h3 id="实例对象-proto-函数-prototype" tabindex="-1">实例对象.<code>__proto__</code> === 函数.prototype <a class="header-anchor" href="#实例对象-proto-函数-prototype" aria-hidden="true">#</a></h3><p>使用 new 创建一个实例对象 d（使用 new 操作符后 Demo 就变成了构造函数）。d 是对象 ，自然有 <code>__proto__</code> (原型),此时原型指向构造函数 Demo 的 prototype。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Demo</span><span style="color:var(--shiki-color-text);">() {}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">d</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Demo</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">d</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">__proto__</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Demo</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="原型链执行流程" tabindex="-1">原型链执行流程 <a class="header-anchor" href="#原型链执行流程" aria-hidden="true">#</a></h3><p>当我们访问一个对象属性时，程序会先去这个对象里面找，如果没有找到就会去这个对象的 原型上找。</p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Demo</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.name </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;蓝桥&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Demo</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">say</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;我是&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.name)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">d</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Demo</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 虽然 Demo 上没有 say 方法，但是因为Demo的prototype上有此方法，所以下面的调用可以正常打印。</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">d</span><span style="color:var(--shiki-token-function);">.say</span><span style="color:var(--shiki-color-text);">() </span><span style="color:var(--shiki-token-comment);">// 我是蓝桥</span></span>
<span class="line"></span></code></pre></div><p><img src="`+l+'" alt="原型链基本流程"></p></details><hr><h2 id="var、let、const-的区别" tabindex="-1">var、let、const 的区别 <a class="header-anchor" href="#var、let、const-的区别" aria-hidden="true">#</a></h2><div class="vp-table__container"><table><thead><tr><th></th><th>var</th><th>let</th><th>cosnt</th></tr></thead><tbody><tr><td>变量提升</td><td>是</td><td>否</td><td>否</td></tr><tr><td>作用域</td><td>函数作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>作为全局变量时，是否成为 window 属性</td><td>是</td><td>否</td><td>否</td></tr><tr><td>是否可以重复声明</td><td>是</td><td>否</td><td>否</td></tr><tr><td>值是否可改变</td><td>是</td><td>是</td><td>简单类型不可修改</td></tr></tbody></table></div><hr><h2 id="改变函数上下文的-this" tabindex="-1">改变函数上下文的 this <a class="header-anchor" href="#改变函数上下文的-this" aria-hidden="true">#</a></h2><p><strong>优先级:</strong> new 调用 &gt; call、apply、bind 调用 &gt; 对象上的函数调用 &gt; 普通函数调用</p><p><img src="'+e+`" alt="this指向"></p><h3 id="call" tabindex="-1">call <a class="header-anchor" href="#call" aria-hidden="true">#</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noreferrer">Function.prototype.call()</a> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">fn</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.name)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;zhangsan&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">fn</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(obj) </span><span style="color:var(--shiki-token-comment);">// 指定 this 为 obj，输出 &#39;zhangsan&#39;</span></span>
<span class="line"></span></code></pre></div></details><h3 id="apply" tabindex="-1">apply <a class="header-anchor" href="#apply" aria-hidden="true">#</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noreferrer">Function.prototype.apply()</a> 方法调用一个具有给定 <code>this</code> 值的函数，以及以一个数组（或类数组对象）的形式提供的 参数。</p><p><code>apply</code> 和 <code>call</code> 的功能完全一样，只是传参形式不一样，<code>call</code> 是传多个参数 ，<code>apply</code> 是只传参数集合。</p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">add</span><span style="color:var(--shiki-color-text);">(x</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> y</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> z) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.x </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.y </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.z</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  x</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  y</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  z</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">add</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(obj</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">)) </span><span style="color:var(--shiki-token-comment);">// 输出 6</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">add</span><span style="color:var(--shiki-token-function);">.apply</span><span style="color:var(--shiki-color-text);">(obj</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">])) </span><span style="color:var(--shiki-token-comment);">// 输出 6，只是传参形式不同而已</span></span>
<span class="line"></span></code></pre></div></details><h3 id="bind" tabindex="-1">bind <a class="header-anchor" href="#bind" aria-hidden="true">#</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noreferrer">Function.prototype.bind()</a> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p><p><code>bind</code> 和 <code>call</code>、<code>apply</code> 的区别是，函数调用 <code>call</code> 和 <code>apply</code> 会直接调用，而调 用 <code>bind</code> 是创建一个新的函数，必须手动去再调用一次，才会生效。</p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">add</span><span style="color:var(--shiki-color-text);">(x</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> y</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> z) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.x </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.y </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.z</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  x</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  y</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  z</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">add1</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">add</span><span style="color:var(--shiki-token-function);">.bind</span><span style="color:var(--shiki-color-text);">(obj</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-comment);">// bind 会返回一个新的函数</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-function);">add1</span><span style="color:var(--shiki-color-text);">()) </span><span style="color:var(--shiki-token-comment);">// 执行新的函数，输出 6</span></span>
<span class="line"></span></code></pre></div></details><hr><h2 id="暂时性死区" tabindex="-1">暂时性死区 <a class="header-anchor" href="#暂时性死区" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">介绍</p><p>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可 获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p></div><p>let 或 const 声明的变量拥有暂时性死区（TDZ）：当进入它的作用域，它不能被访问（获 取或设置）直到执行到达声明。</p><p>首先看看不具有暂时性死区的 var：</p><blockquote><ol><li>当进入 var 变量的作用域（包围它的函数），立即为它创建（绑定）存储空间。变 量会立即被初始化并赋值为 undefined。</li><li>当执行到变量声明的时候，如果变量定义了值则会被赋值。</li></ol></blockquote><p>通过 let 声明的变量拥有暂时性死区，生命周期如下：</p><blockquote><ol><li>当进入 let 变量的作用域（包围它的语法块），立即为它创建（绑定）存储空间。 此时变量仍是未初始化的。</li><li>获取或设置未初始化的变量将抛出异常 ReferenceError。</li><li>当执行到变量声明的时候，如果变量定义了值则会被赋值。如果没有定义值，则赋值 为 undefined。</li></ol></blockquote><p>const 工作方式与 let 类似，但是定义的时候必须赋值并且不能改变。</p><details class="details custom-block"><summary>查看案例</summary><blockquote><p>var 声明变量没有暂时性死区</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">;(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i) </span><span style="color:var(--shiki-token-comment);">// undefined</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">var</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i) </span><span style="color:var(--shiki-token-comment);">// 1</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})()</span></span>
<span class="line"></span></code></pre></div><blockquote><p>let 声明变量有暂时性死区</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">;(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i) </span><span style="color:var(--shiki-token-comment);">// Cannot access &#39;i&#39; before initialization</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i) </span><span style="color:var(--shiki-token-comment);">// 1</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})()</span></span>
<span class="line"></span></code></pre></div></details><hr><h2 id="作用域-闭包" tabindex="-1">作用域 &amp; 闭包 <a class="header-anchor" href="#作用域-闭包" aria-hidden="true">#</a></h2><p>es6 之前 JavaScript 只有函数级作用域，没有块级作用域。</p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">demo</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">var</span><span style="color:var(--shiki-color-text);"> a </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;蓝桥&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(a) </span><span style="color:var(--shiki-token-comment);">// 蓝桥</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(a) </span><span style="color:var(--shiki-token-comment);">//a is not defined</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">var</span><span style="color:var(--shiki-color-text);"> b </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;bbb&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(b) </span><span style="color:var(--shiki-token-comment);">// bbb(如果if条件为false则输出undefined)</span></span>
<span class="line"></span></code></pre></div></details><p><strong>经典题型</strong></p><p>请问以下代码打印的结果是？</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">var</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">; i </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">10</span><span style="color:var(--shiki-color-text);">; i</span><span style="color:var(--shiki-token-keyword);">++</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">setTimeout</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block"><summary>查看答案</summary><blockquote><p>执行结果: <strong>输出 10 次 10</strong></p><p>执行过程：</p><ol><li>代码执行 for 循环，i 依次从 0 加到 9，循环十次。</li><li>代码等待定时器 1 秒钟时间到，执行定时的里面的内容。</li><li>执行打印 i 语句，因为定时器函数中没有声明 i 变量，所以代码只能去定时器函数 外的作用域(也就是 window)去查找。</li><li>在外部找到了 i 此时 i 已经变成了 10，所以打印 10 次 10。</li></ol><p><strong>如果在当前作用域中没有发现此变量的声明，程序就会去父作用域查找，直到找到为止 。在浏览器中最外层作用域是 window，如果在 window 上也没有找到，就返回 xxx is not defined 查找结束。</strong></p></blockquote></details><h3 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-hidden="true">#</a></h3><div class="tip custom-block"><p class="custom-block-title">介绍</p><p>（closure）指有权访问另一个函数作用域中变量的函数——JavaScript 高级程序设计</p><p>可以延申变量的作用范围 容易造成内存泄漏（因为一直不销毁变量）</p></div><p>闭包就是可以让外部访问到函数内部的变量</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">demo</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">var</span><span style="color:var(--shiki-color-text);"> a </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;aaa&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> a</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">d</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">demo</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-function);">d</span><span style="color:var(--shiki-color-text);">()) </span><span style="color:var(--shiki-token-comment);">// aaa</span></span>
<span class="line"></span></code></pre></div><p>通过在 demo 函数中返回一个函数，在返回的函数中再返回这个变量，然后当我们在外部去 调用这个返回出来的函数时就可以得到这个变量的值。也就是说 d 函数 保存了对 a 的引 用，这就形成了闭包。</p><p><strong>还是上面经典例题: 运用闭包知识,让函数输出 0-9</strong></p><details class="details custom-block"><summary>查看答案</summary><blockquote><p><strong>方法一:</strong> 用 let 声明变量 i(不能用 const,因为常量不能修改),let 是块级作用域, 块内部的函数也在作用域内,可以访问到 i 的值.</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">; i </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">10</span><span style="color:var(--shiki-color-text);">; i</span><span style="color:var(--shiki-token-keyword);">++</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">setTimeout</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p><strong>方法二:</strong> 在 setTimeout 外边套一层自执行函数,把每次循环的 i 结果保存在当前作 用域下,当执行定时器的时候,可以去当前作用域找 i 的值.</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">var</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">; i </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">10</span><span style="color:var(--shiki-color-text);">; i</span><span style="color:var(--shiki-token-keyword);">++</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  ;(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (i) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-function);">setTimeout</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  })(i)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre></div></details><hr><h2 id="es6-新特性" tabindex="-1">ES6 新特性 <a class="header-anchor" href="#es6-新特性" aria-hidden="true">#</a></h2><ul><li><p><strong>let 和 const</strong></p></li><li><p><strong>解构 &amp; 扩展运算符</strong></p><details class="details custom-block"><summary>查看案例</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">people</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;张三&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  love</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;吃饭&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 把 name 和 love 解构出来</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> { </span><span style="color:var(--shiki-token-constant);">name</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">love</span><span style="color:var(--shiki-color-text);"> } </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> people</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(name</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> love) </span><span style="color:var(--shiki-token-comment);">// 张三 吃饭</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 扩展运算符</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">user</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> { </span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">people }</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(user) </span><span style="color:var(--shiki-token-comment);">// {name: &#39;张三&#39;, love: &#39;吃饭&#39;}</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><strong>函数可以设置默认参数 (函数的 legnth 属性会失效)</strong></p><details class="details custom-block"><summary>查看案例</summary><blockquote><p>通过 length 可以获取函数参数的个数</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">demo</span><span style="color:var(--shiki-color-text);">(name </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;张三&quot;</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;我是&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> name)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">demo</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">length</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-comment);">// 输出0 实际是有一个参数</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><strong>Symbol</strong></p><p>基本数据类型,表示独一无二的值. Symbol 值通过 <code>symbol</code> 函数生成</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">fnName</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Symbol</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">typeof</span><span style="color:var(--shiki-color-text);"> fnName </span><span style="color:var(--shiki-token-comment);">// &quot;symbol&quot;</span></span>
<span class="line"></span></code></pre></div></li><li><p><strong>Set 和 Map 数据结构</strong></p><p>Set 类似数组,值唯一.</p><details class="details custom-block"><summary>查看使用方法</summary><blockquote><p><strong>基本使用</strong></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Set</span><span style="color:var(--shiki-color-text);">([</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.add</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-comment);">// 向arr中添加元素</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.delete</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-comment);">// 删除数据为1的元素</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);">.size </span><span style="color:var(--shiki-token-comment);">// 返回arr长度</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.has</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-comment);">// 判断arr中是否有2这个元素</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.clear</span><span style="color:var(--shiki-color-text);">() </span><span style="color:var(--shiki-token-comment);">// 清除所有元素</span></span>
<span class="line"></span></code></pre></div><blockquote><p><strong>数组去重</strong></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">]</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr2</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-keyword);">...new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Set</span><span style="color:var(--shiki-color-text);">(arr)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(arr2) </span><span style="color:var(--shiki-token-comment);">// [1,2,3,4]</span></span>
<span class="line"></span></code></pre></div></details><p>Map 类似对象,也通过键值对存储,区别是 Object 中的键只能是字符串,而 Map 中的键可 以是任意数据类型.</p><details class="details custom-block"><summary>查看使用方法</summary><blockquote><p><strong>基本使用</strong></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Map</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-token-function);">.set</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;name&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;张三&quot;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-comment);">// 设置元素</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-token-function);">.get</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;name&quot;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-comment);">// 张三</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-token-function);">.has</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;name&quot;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-comment);">// 判断有没有这个元素</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-color-text);">.size </span><span style="color:var(--shiki-token-comment);">// 获取map的长度</span></span>
<span class="line"></span></code></pre></div><blockquote><p><strong>键为 object 类型</strong></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Map</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">k</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;张三&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-token-function);">.set</span><span style="color:var(--shiki-color-text);">(k</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">18</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">m</span><span style="color:var(--shiki-token-function);">.get</span><span style="color:var(--shiki-color-text);">(k) </span><span style="color:var(--shiki-token-comment);">// 18</span></span>
<span class="line"></span></code></pre></div></details></li><li><p><strong>Promise</strong></p><p>没有 Promise 之前使用回调函数实现异步变成,回调函数多的话会产生回调地狱 ,Promise 可以解决回调地狱.</p><details class="details custom-block"><summary>基本使用</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">promise</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);">(resolve</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);">reject){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-comment);">/*异步程序成功*/</span><span style="color:var(--shiki-color-text);">){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-function);">resolve</span><span style="color:var(--shiki-color-text);">(res)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-function);">reject</span><span style="color:var(--shiki-color-text);">(error)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">promise</span><span style="color:var(--shiki-token-function);">.then</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);">(res){}</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);">(error){})</span></span>
<span class="line"></span></code></pre></div></details><p>常用方法:</p><ol><li><p><code>Promise.prototype.then()</code> Promise 实例添加状态改变时的回调函数.</p></li><li><p><code>Promise.prototype.catch()</code> 发生错误时的回调函数.</p></li><li><p><code>Promise.all()</code> 可以将多个 Promise 实例包装成一个新的 Promise 实例.</p><p>返回值: 成功和失败的返回值不同,成功返回一个结果数组,失败则返回最先被 reject 的值.</p></li><li><p><code>Promise.race()</code> 可以将多个 Promise 实例包装成一个新的 Promise 实例.</p><p>返回值: 哪个结果获得的快,就返回哪个结果,不管结果本身时成功状态还是失败状态 .</p></li></ol></li></ul><hr><h2 id="es2018-es9" tabindex="-1">ES2018 (ES9) <a class="header-anchor" href="#es2018-es9" aria-hidden="true">#</a></h2><p>Rest/Spread 属性: 对对象解构和赋值提供了更灵活的语法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> { a</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> b</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> x</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> y</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-color-text);"> }</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> { </span><span style="color:var(--shiki-token-constant);">x</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">y</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-token-constant);">others</span><span style="color:var(--shiki-color-text);"> } </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> obj</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(x) </span><span style="color:var(--shiki-token-comment);">// 输出: 3</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(y) </span><span style="color:var(--shiki-token-comment);">// 输出: 4</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(others) </span><span style="color:var(--shiki-token-comment);">// 输出: { a: 1, b: 2 }</span></span>
<span class="line"></span></code></pre></div><hr><h2 id="es2019-es10" tabindex="-1">ES2019 (ES10) <a class="header-anchor" href="#es2019-es10" aria-hidden="true">#</a></h2><p>Object.fromEntries: 从键值对数组中创建一个对象。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.fromEntries</span><span style="color:var(--shiki-color-text);">([</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  [</span><span style="color:var(--shiki-token-string-expression);">&quot;1&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;a&quot;</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  [</span><span style="color:var(--shiki-token-string-expression);">&quot;2&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;b&quot;</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">]) </span><span style="color:var(--shiki-token-comment);">// { &#39;1&#39;: &#39;a&#39;, &#39;2&#39;: &#39;b&#39; }</span></span>
<span class="line"></span></code></pre></div><hr><h2 id="es2020-es11" tabindex="-1">ES2020 (ES11) <a class="header-anchor" href="#es2020-es11" aria-hidden="true">#</a></h2><ul><li><strong>空值合并运算符 (??)</strong></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">name</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getUserName</span><span style="color:var(--shiki-color-text);">() </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;Default Name&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 左边为false，取右边值</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">name</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getUserName</span><span style="color:var(--shiki-color-text);">() </span><span style="color:var(--shiki-token-keyword);">??</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;Default Name&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 左边为 null 或 undefined，取右边值</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>可选链操作符 (?.)</strong></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">value</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-token-function);">?.</span><span style="color:var(--shiki-token-constant);">prop</span><span style="color:var(--shiki-token-function);">?.method</span><span style="color:var(--shiki-color-text);">() </span><span style="color:var(--shiki-token-comment);">// 如果obj.prop.method存在，则返回obj.prop.method()的结果，否则返回undefined</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>非空断言操作符 (!.)</strong></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">foo</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> { bar</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> { baz</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">42</span><span style="color:var(--shiki-color-text);"> } };</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">baz</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> foo</span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-color-text);">.bar</span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-color-text);">.baz; </span><span style="color:var(--shiki-token-comment);">// 42  如果foo, bar, baz存在，则返回baz，否则抛出错误</span></span>
<span class="line"></span></code></pre></div><hr><h2 id="宏任务-微任务-老" tabindex="-1">宏任务 &amp; 微任务 （老） <a class="header-anchor" href="#宏任务-微任务-老" aria-hidden="true">#</a></h2><h3 id="宏任务" tabindex="-1">宏任务 <a class="header-anchor" href="#宏任务" aria-hidden="true">#</a></h3><p>JavaScript 是单线程,但浏览器是多线程的,JavaScript 执行在浏览器中，在 V8 里跑着的 一直是一个一个的宏任务.</p><p>宏任务代表: 主线程、定时器.</p><details class="details custom-block"><summary>查看案例</summary><blockquote><p>浏览器在执行下面代码时会先执行主线程代码（宏任务 1）然后再执行 setTimeout 里面 的代码。虽然 setTimeout 的定时时间为 0，但是浏览器在处理的时候会把它当做下一个 宏任务进行处理</p></blockquote><p><img src="`+r+'" alt="宏任务"></p></details><h3 id="微任务" tabindex="-1">微任务 <a class="header-anchor" href="#微任务" aria-hidden="true">#</a></h3><p>当浏览器执行完一个宏任务后,就会检查有没有可执行的微任务,如果有,先把当前微任务执 行完, 再去执行下一个宏任务.</p><p>微任务代表: ajax、回调函数、和 Promise.</p><p>流程如下:</p><details class="details custom-block"><summary>查案图解</summary><p><img src="'+i+`" alt="微任务"></p></details><p><strong>经典例题</strong></p><p>以下代码的执行结果是?</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">setTimeout</span><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-color-text);">((res</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> req) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">res</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})</span><span style="color:var(--shiki-token-function);">.then</span><span style="color:var(--shiki-color-text);">(() </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">5</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block"><summary>查看答案</summary><blockquote><p>代码从上到下执行</p><p>⬇</p><p>打印 1</p><p>⬇</p><p>遇到 setTimeout 是下一个宏任务，目前先不处理</p><p>⬇</p><p>遇到 Promise 打印出 3 then 回调函数是微任务，先不处理</p><p>⬇</p><p>打印 5 且第一个宏任务执行完毕</p><p>⬇</p><p>开始执行微任务队列</p><p>⬇</p><p>打印 4 微任务队列执行完毕</p><p>⬇</p><p>开始执行下一个宏任务</p><p>⬇</p><p>打印 2</p><p>⬇</p><p>程序结束</p></blockquote><blockquote><p><strong>注意</strong>: 只有 Promise then 或者 catch 里面的方法是微任务，Promise 里面的回调 是当作主程序的宏任务进行处理的。</p></blockquote></details><hr><h2 id="消息队列-微队列-新" tabindex="-1">消息队列 &amp; 微队列（新） <a class="header-anchor" href="#消息队列-微队列-新" aria-hidden="true">#</a></h2><p>任务没有优先级，但是<strong>消息队列</strong>有优先级</p><div class="info custom-block"><p class="custom-block-title">根据 W3C 的最新解释:</p><ol><li>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以 分属于不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出 任务执行。</li><li>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行</li></ol><p><a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint" target="_blank" rel="noreferrer">官网链接</a></p></div><blockquote><p>随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法</p></blockquote><div class="tip custom-block"><p class="custom-block-title">在目前 chrome 的实现中,至少包含了下面的队列:</p><p>微队列：用户存放需要最快执行的任务，优先级「最高」</p><p>交互队列：用于存放用户操作后产生的事件处理任务，优先级「高」</p><p>延时队列：用于存放计时器到达后的回调任务，优先级「中」</p></div><details class="details custom-block"><summary>查看图解</summary><p><img src="`+p+`" alt="消息队列"></p></details><p>添加任务到微队列的主要方式主要是使用 Promise、MutationObserver，（async 函数里遇 到 await 之前的代码是同步里的，遇到 await 时，会执行 await 后面的函数，然后返回 一个 promise，把 await 下面的代码放入微队列，并且退出这个 async 函数。） 例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 立即把一个函数添加到微队列</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-token-function);">.resolve</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-function);">.then</span><span style="color:var(--shiki-color-text);">(函数)</span></span>
<span class="line"></span></code></pre></div><hr><h2 id="map-和-foreach-的区别" tabindex="-1">map 和 forEach 的区别 <a class="header-anchor" href="#map-和-foreach-的区别" aria-hidden="true">#</a></h2><p><strong>相同点：</strong></p><ol><li>只能遍历数组，且循环遍历数组中的每一项</li><li>每次执行匿名函数都支持三个参数，参数分别为 item（当前项），index（索引值） ，arr（原数组）</li><li>匿名函数中的 this 都指向 window</li></ol><p><strong>不同点：</strong></p><ol><li>map()会分配内存空间存储新数组并返回，forEach()不会返回数据</li><li>forEach()允许回调更改原始数组的元素</li></ol><hr><h2 id="for-in-for-of" tabindex="-1">for...in &amp; for...of <a class="header-anchor" href="#for-in-for-of" aria-hidden="true">#</a></h2><p><strong>for...in</strong></p><ol><li>遍历获取索引</li><li>会遍历整个原型链</li><li>对于数组遍历，会返回数组中所有可枚举的属性(包括原型链上的可枚举属性 )</li></ol><details class="details custom-block"><summary>for-in 案例</summary><blockquote><p>基本使用</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 在原型链上的Object上自定义一个myFunc方法</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">myFunc01</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;1&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 在原型链上的Array上自定义一个myFunc方法</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Array</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">myFunc02</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (value) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">   </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;2&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> b </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-color-text);">]</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">in</span><span style="color:var(--shiki-color-text);"> b) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(i);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">打印结果：</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);"> myFunc02 myFunc01</span></span>
<span class="line"></span></code></pre></div><blockquote><p>如何只遍历自身属性？ （for-in 中增加 hasOwnProperty 判断）</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 在原型链上的Object上自定义一个myFunc方法</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">myFunc01</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;1&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 在原型链上的Array上自定义一个myFunc方法</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Array</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">myFunc02</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (value) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">   </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;2&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> b </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-color-text);">]</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> key </span><span style="color:var(--shiki-token-keyword);">in</span><span style="color:var(--shiki-color-text);"> b) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">b</span><span style="color:var(--shiki-token-function);">.hasOwnProperty</span><span style="color:var(--shiki-color-text);">(key)){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(key);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">打印结果：</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div></details><p><strong>for...of</strong></p><ol><li>遍历获取值</li><li>只遍历当前对象，不会遍历原型链</li><li>for-of 是 es6 新增的遍历方法，只限于迭代器(iterator)，不可以遍历普通对象(obj is not iterable).</li><li>可以正确响应 break、continue 和 return 语句</li></ol><p>可迭代的对象：包括 Array, Map, Set, String, TypedArray, arguments 对象等有迭代器 对象的集合</p><hr><h2 id="set、map、weakset-和-weakmap-的区别" tabindex="-1">Set、Map、WeakSet 和 WeakMap 的区别 <a class="header-anchor" href="#set、map、weakset-和-weakmap-的区别" aria-hidden="true">#</a></h2><p><strong>Set</strong></p><p>Set 是一个可以存储数据的对象，可以在其中添加或者删除数据，并循环访问 Set。但是 Set 中没有索引，也不能存放重复的值，数组与之相反。</p><ol><li>成员不能重复</li><li>类似数组，只有键值，没有键名</li><li>可以遍历，方法有 add、delete、has</li></ol><p><strong>WeakSet</strong></p><pre><code>如果将其存储的对象设为了 null，相当于是删除了该对象，当垃圾回收机运行时，会释放
掉被删除对象占用的空间。
</code></pre><ol><li><p>WeakSet 的成员只能是对象且都是弱引用。</p><blockquote><p>在 WeakSet 中，add() 方法中不能传入非对象参数，若传入会报错。</p></blockquote></li><li><p>在 WeakSet 中，给 has() 和 delete() 方法传入非对象参数，虽然不会报错，但是会 返回 false。</p></li><li><p>WeakSet 对象没有 size 属性，不能被遍历。</p><blockquote><p>由于 WeakSet 里面存储的都是弱引用，内部有多少个成员，取决于垃圾回收机制有没 有运行。运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测 的，因此 ES6 规定 WeakSet 不可遍历。</p></blockquote></li></ol><p><strong>Map</strong></p><div class="tip custom-block"><p class="custom-block-title">Map</p><p>Map 是 ES6 中一种存储许多键值对的有序列表，其键值对可以是任意数据类型。Map 是有 序的，它会按照键值插入的顺序来排列。</p></div><ol><li>Map 可以创建任意数据类型的键值对，打破了对象键名类型限制的局限性。</li><li>我们可以使用 forEach() 方法来遍历 Map，而对象不能。</li><li>我们可以使用 set()、get()、has()、delete()、clear() 等方法来操作 Map。</li></ol><p>常用方法：</p><p><code>set()</code> 传入 key:value，如：<code>.set(3, &quot;化妆品&quot;)</code>，添加一条数据</p><p><code>get()</code> 获取指定 key 对应的值</p><p><code>has()</code> 用来判断指定键名对应的数据是否存在于当前集合中。</p><p><code>delete()</code> 用来删除指定键名的数据。</p><p><code>clear()</code> 用来清空集合中的数据。</p><p><strong>WeakMap</strong></p><ol><li>只接受对象为键名（null 除外），不接受其他类型的值作为键名</li><li>键名指向的对象，不计入垃圾回收机制</li><li>不能遍历，方法同 get、set、has、delete；</li></ol><hr><h2 id="内存泄漏的几种情况" tabindex="-1">内存泄漏的几种情况 <a class="header-anchor" href="#内存泄漏的几种情况" aria-hidden="true">#</a></h2><ol><li>意外的全局变量</li><li>闭包</li><li>未被清空的定时器</li><li>未被销毁的事件监听</li><li>DOM 引用</li></ol><hr><h2 id="promise-all-方法" tabindex="-1">Promise.all 方法 <a class="header-anchor" href="#promise-all-方法" aria-hidden="true">#</a></h2><p>（可以用来隐藏加载动画）</p><p><code>Promise.all</code> 方法中的参数是一个数组，数组中的每个元素是实例化后的 <code>Promise</code> 对 象，格式如下代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-token-function);">.all</span><span style="color:var(--shiki-color-text);">([p1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);">p2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);">p3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">])</span><span style="color:var(--shiki-token-function);">.then</span><span style="color:var(--shiki-color-text);">(res</span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// 所有请求成功后的操作步骤</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);">error</span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// 某一个请求失败后的操作步骤</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">});</span></span>
<span class="line"></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">成功</p><p>上述代码中，p1、p2、p3 都是实例化后的 <code>Promise</code> 对象，当全部的实例化对象都执行成 功后，进入 <code>then</code> 方法的第一个执行成功的回调函数中，函数参数是<strong>每个任务执行成功 后的结果，以数组形式保存</strong>。</p></div><div class="info custom-block"><p class="custom-block-title">失败</p><p>如果在调用 <code>Promise.all</code> 方法时，有一个 <code>Promise</code> 实例对象（比如：p1）的任务执行 失败了，则会<strong>直接进入</strong> <code>Promise.all</code> 后的 <code>then</code> 方法的失败回调函数中。</p></div><blockquote><p>通过 <code>Promise.all</code> 方法可以并列完成多个异步的请求，只有当全部请求成功后，才进 入 <code>then</code> 方法中的成功回调函数中，否则，进入失败的回调函数中，因此，当首次加载 页面时，可以将各种的异步请求放入 <code>Promise.all</code> 方法中，如果全部完成，则在 <code>then</code> 方法中的成功回调函数中执行下步操作，否则，直接进入失败回调函数中。</p></blockquote><hr><h2 id="promise-race-方法" tabindex="-1">Promise.race 方法 <a class="header-anchor" href="#promise-race-方法" aria-hidden="true">#</a></h2><p>与 <code>Promise.all</code> 方法不同，<code>Promise.race</code> 方法是多个 <code>Promise</code> 实例化对象在比赛 ， <strong>执行最快的那个任务的结果</strong>，将返回给 <code>then</code> 方法中的对应回调函数中.</p><p>（通过这种方式，可以检测页面中某个请求是否超时，并输出相关的提示信息。）</p><p>与 <code>Promise.all</code> 方法一样，<code>Promise.race</code> 中的参数也是一个数组，每个元素也是实例 化后的 <code>Promise</code> 对象，格式如下代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-token-function);">.race</span><span style="color:var(--shiki-color-text);">([p1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);">p2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);">p3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">])</span><span style="color:var(--shiki-token-function);">.then</span><span style="color:var(--shiki-color-text);">(</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);">(v){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-comment);">//获取最快任务成功时的返回值</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);">(){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-comment);">//获取最快任务失败时的返回值</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"></span></code></pre></div><h2 id="内置对象" tabindex="-1">-----------内置对象-------------- <a class="header-anchor" href="#内置对象" aria-hidden="true">#</a></h2><h2 id="数学对象" tabindex="-1">数学对象 <a class="header-anchor" href="#数学对象" aria-hidden="true">#</a></h2><p>JavaScript 中的数学对象为 Math，它的内部有一些数学的属性和函数方法。</p><p>Math 的常用属性如下表所示：</p><div class="vp-table__container"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Math.E</td><td>自然对数的底数</td></tr><tr><td>Math.LN2</td><td>2 的自然对数</td></tr><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.SQRT2</td><td>2 的平方根</td></tr></tbody></table></div><p>Math 的常用方法如下表所示：</p><div class="vp-table__container"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Math.abs(x)</td><td>返回一个数的绝对值。</td></tr><tr><td>Math.pow(x, y)</td><td>返回一个数的 y 次幂。</td></tr><tr><td>Math.random()</td><td>返回一个 0 到 1 之间的伪随机数。</td></tr><tr><td>Math.sqrt(x)</td><td>返回一个数的平方根。</td></tr><tr><td>Math.round()</td><td>返回四舍五入后的整数。</td></tr><tr><td>Math.exp(x)</td><td>返回欧拉常数的参数次方。</td></tr></tbody></table></div><h2 id="日期对象" tabindex="-1">日期对象 <a class="header-anchor" href="#日期对象" aria-hidden="true">#</a></h2><p>在 JavaScript 中，日期对象是 Date，用于处理日期和时间。</p><p>其常用方法如下所示：</p><div class="vp-table__container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getFullYear()</td><td>年 (2023)</td></tr><tr><td>getMonth()</td><td>月 (0-11)</td></tr><tr><td>getDate()</td><td>日 (1-31)</td></tr><tr><td>getDay()</td><td>星期几 (0-6，0 代表星期天)</td></tr><tr><td>getHours()</td><td>小时 (0-23)</td></tr><tr><td>getMinutes()</td><td>分钟 (0-59)</td></tr><tr><td>getSeconds()</td><td>秒 (0-59)</td></tr><tr><td>getMilliseconds()</td><td>当前毫秒 (0-999)</td></tr><tr><td>getTime()</td><td>时间戳 (1970.1.1 开始的毫秒数)</td></tr><tr><td>toLocaleDateString()</td><td>当前日期 (2023/11/30)</td></tr><tr><td>toLocaleTimeString()</td><td>当前时间 (12:00:00)</td></tr><tr><td>toLocaleString()</td><td>日期时间 (2023/11/30 12:00:00)</td></tr></tbody></table></div><h2 id="数组对象——常用方法" tabindex="-1">数组对象——常用方法 <a class="header-anchor" href="#数组对象——常用方法" aria-hidden="true">#</a></h2><ul><li><p><strong>slice()</strong></p><blockquote><p>取数组中下标从 2 到 4 的值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.slice</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>unshift()</strong></p><blockquote><p>在数组的头部增加新元素。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.unshift</span><span style="color:var(--shiki-color-text);">(待添加项)</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>shift()</strong></p></li></ul><blockquote><p>删除数组的首元素。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.shift</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span></code></pre></div></blockquote><ul><li><strong>sort()</strong></li></ul><blockquote><p>给数组中的元素从小到大进行排序。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.sort</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span></code></pre></div></blockquote><ul><li><p><strong>reverse()</strong></p><blockquote><p>将数组中的元素进行逆序排列。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.reverse</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>join()</strong></p><blockquote><p>将数组中的字符拼接成字符串。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.join</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>concat()</strong></p><blockquote><p>将两个数组拼接在一起。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 将 数组2 拼接到 数组1 里</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">数组1</span><span style="color:var(--shiki-token-function);">.concat</span><span style="color:var(--shiki-color-text);">(数组2)</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>includes()</strong></p><blockquote><p>用来判断该数组中是否包含某个元素。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.includes</span><span style="color:var(--shiki-color-text);">(元素)</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>toString()</strong></p></li></ul><blockquote><p>将数组中的值转换成字符串类型。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.toString</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span></code></pre></div></blockquote><ul><li><p><strong>indexOf()</strong></p><blockquote><p>用来查找指定元素的下标值。（如果查找到多个匹配的元素时，返回的是第一个匹配的 元素下标。如果找不到，返回 -1。）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.indexOf</span><span style="color:var(--shiki-color-text);">(元素)</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>Array.from()</strong></p><blockquote><p>可以将以下两类对象转为数组。(返回一个新数组)</p><ol><li>类似数组的对象（array-like-object）。</li><li>可遍历的对象（iterable-object）。</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Array</span><span style="color:var(--shiki-token-function);">.from</span><span style="color:var(--shiki-color-text);">(待转换的对象)</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>find()</strong></p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find" target="_blank" rel="noreferrer">find()</a> 方法是用于从数组中寻找一个符合指定条件的值，该方法返回的是第一个符合条件的元 素，如果没找到，则返回 undefined.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">array</span><span style="color:var(--shiki-token-function);">.find</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-function);">callback</span><span style="color:var(--shiki-color-text);">(value</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> index</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> arr)</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> thisValue)</span></span>
<span class="line"></span></code></pre></div><p>参数说明如下：</p><p><code>callback</code> 是数组中每个元素执行的回调函数。</p><p><code>value</code> 是当前元素的值，它是一个必须参数。</p><p><code>index</code> 是数组元素的下标，它是一个可选参数。</p><p><code>arr</code> 是被 find() 方法操作的数组，它是一个可选参数。</p><p><code>thisValue</code> 是执行回调时用作 this 的对象，它是一个可选参数。</p></blockquote></li><li><p><strong>findIndex()</strong></p></li></ul><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex" target="_blank" rel="noreferrer">findIndex()</a> 方法返回数组中第一个符合指定条件的元素的索引下标值，如果整个数组没有符合条件的 元素，则返回 -1。</p><p>注意：执行回调函数时，会自动传入 value、index、arr 这三个参数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">array</span><span style="color:var(--shiki-token-function);">.findIndex</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-function);">callback</span><span style="color:var(--shiki-color-text);">(value</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> index</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> arr)</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> thisArg)</span></span>
<span class="line"></span></code></pre></div><p>参数说明如下：</p><p><code>callback</code> 是数组中每个元素都会执行的回调函数。</p><p><code>value</code> 是当前元素的值，它是一个必须参数。</p><p><code>index</code> 是数组元素的下标，它是一个必须参数。</p><p><code>arr</code> 是被 findIndex() 方法操作的数组，它是一个必须参数。</p><p><code>thisArg</code> 是执行回调时用作 this 的对象，它是一个可选参数。</p></blockquote><ul><li><strong>fill()</strong></li></ul><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" target="_blank" rel="noreferrer">fill()</a> 方法是用指定的值来填充原始数组的元素。</p><p>注意：如果不指定 start 和 end 参数，该方法会默认填充整个数组的值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">array</span><span style="color:var(--shiki-token-function);">.fill</span><span style="color:var(--shiki-color-text);">(value</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> start</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> end)</span></span>
<span class="line"></span></code></pre></div><p>其参数说明如下：</p><p><code>value</code> 是用来填充数组的值，它是一个必须参数。</p><p><code>start</code> 是被填充数组的索引起始值，它是一个可选参数。</p><p><code>end</code> 是被填充数组的索引结束值，它是一个可选参数。</p></blockquote><ul><li><strong>entries()、keys()、values()</strong></li></ul><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/entries" target="_blank" rel="noreferrer">entries()</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys" target="_blank" rel="noreferrer">keys()</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values" target="_blank" rel="noreferrer">values()</a> 是 ES6 中三种数组的遍历方法，三个方法返回的都是 Array Iterator 对象。</p><p>entries() 方法以<strong>键/值对</strong>的形式返回数组的 [index,value]，也就是索引和值。其 语法格式为：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">array</span><span style="color:var(--shiki-token-function);">.entries</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span></code></pre></div><p>三种方法使用均需要<code>...</code>展开</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> arr </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-string-expression);">&quot;🐱&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;🐶&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;🐰&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;🐍&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;🐦&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;🐟&quot;</span><span style="color:var(--shiki-color-text);">]</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> result </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.entries</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> result </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.keys</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> result </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">arr</span><span style="color:var(--shiki-token-function);">.values</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">result)</span></span>
<span class="line"></span></code></pre></div></blockquote><h2 id="字符串对象——常用方法" tabindex="-1">字符串对象——常用方法 <a class="header-anchor" href="#字符串对象——常用方法" aria-hidden="true">#</a></h2><ul><li><p><strong>toLowerCase()</strong></p><blockquote><p>把字符串的大写字母转换成小写字母。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">字符串</span><span style="color:var(--shiki-token-function);">.toLowerCase</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>toUpperCase()</strong></p><blockquote><p>把字符串中的小写字母转换成大写字母。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">字符串</span><span style="color:var(--shiki-token-function);">.toUpperCase</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>charAt()</strong></p><blockquote><p>根据指定下标从一个字符串中返回指定的字符。（类似数组的 arr[0] ）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">字符串</span><span style="color:var(--shiki-token-function);">.charAt</span><span style="color:var(--shiki-color-text);">(下标值)</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>substring()</strong></p><blockquote><p>获取下标为 7-10 的字符</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">字符串</span><span style="color:var(--shiki-token-function);">.substring</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">7</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">10</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>replace()</strong></p><blockquote><p>替换指定字符串的内容。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">字符串</span><span style="color:var(--shiki-token-function);">.replace</span><span style="color:var(--shiki-color-text);">(待替换的字符串</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> 新的字符串)</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>split()</strong></p><blockquote><p>可以使用指定的分隔符将一个字符串分割成子字符串数组。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">字符串</span><span style="color:var(--shiki-token-function);">.split</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;,&quot;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-comment);">// 以逗号划分字符串</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>indexOf()</strong></p><blockquote><p>寻找某个字符在字符串中首次出现的位置。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">字符串</span><span style="color:var(--shiki-token-function);">.indexOf</span><span style="color:var(--shiki-color-text);">(字符)</span></span>
<span class="line"></span></code></pre></div></blockquote></li><li><p><strong>includes()</strong></p><blockquote><p>判断是否包含指定字符串，如果包含返回 true，反之 false。</p></blockquote></li><li><p><strong>startsWith()</strong></p><blockquote><p>判断当前字符串是否以指定的子字符串开头，如果是则返回 true，反之 false。</p></blockquote></li><li><p><strong>endsWith()</strong></p><blockquote><p>判断当前字符串是否以指定的子字符串结尾，如果是则返回 true，反之 false。</p></blockquote></li><li><p><strong>repeat(n)</strong></p><blockquote><p>方法用于返回一个重复 n 次原字符串的新字符串，其参数 n 为整数，如果设置 n 为 小数，会自动转换为整数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> str </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;HELLO&quot;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">str</span><span style="color:var(--shiki-token-function);">.repeat</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-color-text);">)) </span><span style="color:var(--shiki-token-comment);">// HELLOHELLOHELLOHELLO</span></span>
<span class="line"></span></code></pre></div></blockquote></li></ul><hr><h2 id="问题" tabindex="-1">-------------问题---------------- <a class="header-anchor" href="#问题" aria-hidden="true">#</a></h2><h2 id="如何理解-js-的异步" tabindex="-1">如何理解 JS 的异步？ <a class="header-anchor" href="#如何理解-js-的异步" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答</p><p>JS 是一门单线程语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个 。而渲染主线程承担着诸多任务，渲染页面、执行 JS 都在其中运行。</p><p>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任 务无法执行。这样一来，一方面回到是繁忙的主线程白白的消耗时间，另一方面导致页面无 法及时更新，给用户造成卡死现象。</p><p>所以浏览器采用异步的方式来避免，具体做法是当某些任务发生时，比如计时器、网络、事 件监听、主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码 ，当其他线程完成时，将实现传递的回调函数包装成任务，加入到消息队列的末尾排队，等 待主线程调度执行。</p><p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p></div><hr><h2 id="阐述一下-js-的事件循环" tabindex="-1">阐述一下 JS 的事件循环 <a class="header-anchor" href="#阐述一下-js-的事件循环" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答</p><p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。</p><p>在 Chrome 的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出第一 个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p><p>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取 而代之的是一种更加灵活多变的处理方式。</p><p>根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的 任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自 行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优 先级，必须优先调度执行。</p></div><hr><h2 id="js-中的计时器能做到精确计时吗-为什么" tabindex="-1">JS 中的计时器能做到精确计时吗？为什么？ <a class="header-anchor" href="#js-中的计时器能做到精确计时吗-为什么" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">不能</p><ol><li>计算机硬件没有原子钟,无法做到精确计时</li><li>操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函 数，也就携带了这些偏差</li><li>按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的 最少时间，这样在计时时间少于 4 毫秒时又带来了偏差</li><li>（重要）受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来 了偏差</li></ol></div><hr><h2 id="javascript-骚操作" tabindex="-1">-----javascript 骚操作----- <a class="header-anchor" href="#javascript-骚操作" aria-hidden="true">#</a></h2><h2 id="交换数组中的两项值" tabindex="-1">交换数组中的两项值 <a class="header-anchor" href="#交换数组中的两项值" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> arr </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-constant);">5</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-constant);">6</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-constant);">7</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-constant);">8</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-constant);">9</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-constant);">10</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">[arr[</span><span style="color:var(--shiki-token-constant);">6</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);">arr[</span><span style="color:var(--shiki-token-constant);">8</span><span style="color:var(--shiki-color-text);">]] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [arr[</span><span style="color:var(--shiki-token-constant);">8</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);">arr[</span><span style="color:var(--shiki-token-constant);">6</span><span style="color:var(--shiki-color-text);">]]</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(arr)</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// [0, 1, 2, 3, 4, 5, 8, 7, 6, 9, 10]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,202),h=[k];function y(v,d,u,x,b,g){return a(),o("div",null,h)}const w=s(c,[["render",y]]);export{f as __pageData,w as default};

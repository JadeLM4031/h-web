import{_ as s,c as o,o as n,a}from"./app.b772827b.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"手写 call","slug":"手写-call","link":"#手写-call","children":[]},{"level":2,"title":"------处理边缘情况------","slug":"处理边缘情况","link":"#处理边缘情况","children":[]},{"level":2,"title":"指向原始值","slug":"指向原始值","link":"#指向原始值","children":[]},{"level":2,"title":"重名（完整代码）","slug":"重名-完整代码","link":"#重名-完整代码","children":[]},{"level":2,"title":"--------使用场景--------","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"1.精准判断一个数据类型","slug":"_1-精准判断一个数据类型","link":"#_1-精准判断一个数据类型","children":[]},{"level":2,"title":"2.伪数组转数组","slug":"_2-伪数组转数组","link":"#_2-伪数组转数组","children":[]},{"level":2,"title":"3.ES5 实现继承","slug":"_3-es5-实现继承","link":"#_3-es5-实现继承","children":[]},{"level":2,"title":"4.处理回调函数 this 丢失问题","slug":"_4-处理回调函数-this-丢失问题","link":"#_4-处理回调函数-this-丢失问题","children":[]}],"relativePath":"code/apply&call.md"}'),t={name:"code/apply&call.md"},l=a(`<h2 id="手写-call" tabindex="-1">手写 call <a class="header-anchor" href="#手写-call" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">注意：</p><p>能用 <code>call</code> 解决的问题也能用 <code>apply</code> 解决，它们俩只是传参形式不同，<code>call</code> 接收多个参数，<code>apply</code> 接收 一个数组。</p></div><p><code>call</code> 是写到 <code>Function.prototype</code> 上的方法</p><p>我们尝试来实现一下显式改变 <code>this</code> 指向的功能，调用对象中的函数，<code>this</code> 指向为这个对象，所以我们需要 做的操作是：</p><blockquote><ol><li><p>把函数 <code>fn</code> 挂载到要指向的对象 <code>context</code> 上。</p></li><li><p>执行 <code>context.fn</code>，执行完了删除 <code>context</code> 上的 <code>fn</code> 函数，避免对传入对象的属性造成污染。</p></li></ol></blockquote><p>不过这里面有一些其他细节需要处理，比如：</p><blockquote><ol><li><p>要处理 <code>context</code> 不传值的情况，传一个默认值 <code>window</code>。</p></li><li><p>处理函数 <code>fn</code> 的参数，执行 <code>fn</code> 函数时把参数携带进去。</p></li><li><p>获取执行函数 <code>fn</code> 产生的返回值，最终返回这个返回值。</p></li></ol></blockquote><p>实现代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 要处理 context 不传值的情况，传一个默认值 window。</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">myCall</span><span style="color:var(--shiki-color-text);">(fn</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> context </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> window) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">context</span><span style="color:var(--shiki-color-text);">.fn </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> fn;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// 处理函数 fn 的参数，执行 fn 函数时把参数携带进去。</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">args</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">arguments]</span><span style="color:var(--shiki-token-function);">.slice</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// 获取执行函数 fn 产生的返回值。</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">res</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">context</span><span style="color:var(--shiki-token-function);">.fn</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">args);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">delete</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">context</span><span style="color:var(--shiki-color-text);">.fn;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// 最终返回这个返回值</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> res;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre></div><p>测试一下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  count</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">10</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">fn</span><span style="color:var(--shiki-color-text);">(x</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> y</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> z) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.count </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> x </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> y </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> z);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">myCall</span><span style="color:var(--shiki-color-text);">(fn</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> obj</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 执行函数 fn，输出 16</span></span>
<span class="line"></span></code></pre></div><p>这样就实现了 <code>call</code> 函数该有的功能，原生的 <code>call</code> 函数是写到 <code>Function.prototype</code> 上的方法，我们也尝 试在函数的原型上实现一个 <code>myCall</code> 函数，只需稍加改造即可，代码实现如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 写到函数的原型上，就不需要把要执行的函数当作参数传递进去</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Function</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">myCall</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (context </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> window) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// 这里的 this 就是这个要执行的函数</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">context</span><span style="color:var(--shiki-color-text);">.fn </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// 参数少了一个，slice(2) 改为 slice(1)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">args</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">arguments]</span><span style="color:var(--shiki-token-function);">.slice</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">res</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">context</span><span style="color:var(--shiki-token-function);">.fn</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">args);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">delete</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">context</span><span style="color:var(--shiki-color-text);">.fn;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> res;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span></code></pre></div><p>测试一下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  count</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">10</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">fn</span><span style="color:var(--shiki-color-text);">(x</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> y</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> z) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.count </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> x </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> y </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> z);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">fn</span><span style="color:var(--shiki-token-function);">.myCall</span><span style="color:var(--shiki-color-text);">(obj</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 执行函数 fn，输出 16</span></span>
<span class="line"></span></code></pre></div><h2 id="处理边缘情况" tabindex="-1">------处理边缘情况------ <a class="header-anchor" href="#处理边缘情况" aria-hidden="true">#</a></h2><h2 id="指向原始值" tabindex="-1">指向原始值 <a class="header-anchor" href="#指向原始值" aria-hidden="true">#</a></h2><p>上文在函数原型上实现的 <code>myCall</code> 函数，还有优化的空间，有一些边缘的情况，可能会导致报错，比如把要指向 的对象指向一个原始值，代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">fn</span><span style="color:var(--shiki-token-function);">.myCall</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// Uncaught TypeError: context.fn is not a function</span></span>
<span class="line"></span></code></pre></div><p>这时，就需要参考一下原生的 <code>call</code> 函数是如何解决的这个问题：</p><p><code>undefined</code> 和 <code>null</code> 指向了 <code>window</code>，原始类型和引用类型都是 <code>undefined</code>。</p><p>其实是因为，原始类型指向对应的包装类型，引用类型就指向这个引用类型，之所以输出值都是 <code>undefined</code>，是 因为这些对象上都没有 <code>userName</code> 属性。</p><p>改造一下我们的 <code>myCall</code> 函数，实现原始类型的兼容，代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Function</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">myCall</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (context </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> window) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (context </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> context </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">undefined</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    context </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> window; </span><span style="color:var(--shiki-token-comment);">// undefined 和 null 指向 window</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  } </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    context </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Object</span><span style="color:var(--shiki-color-text);">(context); </span><span style="color:var(--shiki-token-comment);">// 原始类型就包装一下</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">context</span><span style="color:var(--shiki-color-text);">.fn </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">args</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">arguments]</span><span style="color:var(--shiki-token-function);">.slice</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">res</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">context</span><span style="color:var(--shiki-token-function);">.fn</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">args);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">delete</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">context</span><span style="color:var(--shiki-color-text);">.fn;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> res;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span></code></pre></div><h2 id="重名-完整代码" tabindex="-1">重名（完整代码） <a class="header-anchor" href="#重名-完整代码" aria-hidden="true">#</a></h2><p>还有另外一种边缘情况，假设对象上本来就有一个 <code>fn</code> 属性，执行下面的调用，对象上的 <code>fn</code> 属性会被删除， 代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">person</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  userName</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;zhangsan&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  fn</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">123</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">fn</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.userName);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">fn</span><span style="color:var(--shiki-token-function);">.myCall</span><span style="color:var(--shiki-color-text);">(person);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">person</span><span style="color:var(--shiki-color-text);">.fn); </span><span style="color:var(--shiki-token-comment);">// 输出 undefined，本来应该输出 123</span></span>
<span class="line"></span></code></pre></div><p>因为对象上本来的 <code>fn</code> 属性和 <code>myCall</code> 函数内部临时定义的 <code>fn</code> 属性重名了。</p><p>还记得 <code>Symbol</code> 的作用吗，可以用 <code>Symbol</code> 来防止对象属性名冲突问题，继续改造 <code>myCall</code> 函数，代码实现 如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Function</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">myCall</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (context </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> window) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (context </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> context </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">undefined</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    context </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> window;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  } </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    context </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Object</span><span style="color:var(--shiki-color-text);">(context);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">fn</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Symbol</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;fn&quot;</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 用 symbol 处理一下</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  context[fn] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">args</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">arguments]</span><span style="color:var(--shiki-token-function);">.slice</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">res</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> context[fn](</span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">args);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">delete</span><span style="color:var(--shiki-color-text);"> context[fn];</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> res;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span></code></pre></div><p>至此，一个功能尽可能完善的 <code>myCall</code> 函数，终于写完了。</p><h2 id="使用场景" tabindex="-1">--------使用场景-------- <a class="header-anchor" href="#使用场景" aria-hidden="true">#</a></h2><p><code>call</code> 的使用场景非常多，所有调用 <code>call</code> 的使用场景都是为了显式地改变 <code>this</code> 的指向，能用 <code>call</code> 解 决的问题也能用 <code>apply</code> 解决，因为它们俩只是传参形式不同。下面一起来看 <code>call</code> 常用的四个使用场景。</p><h2 id="_1-精准判断一个数据类型" tabindex="-1">1.精准判断一个数据类型 <a class="header-anchor" href="#_1-精准判断一个数据类型" aria-hidden="true">#</a></h2><p>精准地判断一个数据的类型，可以用到 <code>Object.prototype.toString.call(xxx)</code>。</p><p>调用该方法，统一返回格式 <code>[object Xxx]</code> 的字符串，用来表示该对象。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 引用类型</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">({})); </span><span style="color:var(--shiki-token-comment);">// &#39;[object Object]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {})); </span><span style="color:var(--shiki-token-comment);">// &quot;[object Function]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">/123/</span><span style="color:var(--shiki-token-keyword);">g</span><span style="color:var(--shiki-color-text);">)); </span><span style="color:var(--shiki-token-comment);">// &#39;[object RegExp]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Date</span><span style="color:var(--shiki-color-text);">())); </span><span style="color:var(--shiki-token-comment);">// &#39;[object Date]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Error</span><span style="color:var(--shiki-color-text);">())); </span><span style="color:var(--shiki-token-comment);">// &#39;[object Error]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">([])); </span><span style="color:var(--shiki-token-comment);">// &#39;[object Array]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Map</span><span style="color:var(--shiki-color-text);">())); </span><span style="color:var(--shiki-token-comment);">// &#39;[object Map]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Set</span><span style="color:var(--shiki-color-text);">())); </span><span style="color:var(--shiki-token-comment);">// &#39;[object Set]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">WeakMap</span><span style="color:var(--shiki-color-text);">())); </span><span style="color:var(--shiki-token-comment);">// &#39;[object WeakMap]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">WeakSet</span><span style="color:var(--shiki-color-text);">())); </span><span style="color:var(--shiki-token-comment);">// &#39;[object WeakSet]&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 原始类型</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">)); </span><span style="color:var(--shiki-token-comment);">// &#39;[object Number]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;abc&quot;</span><span style="color:var(--shiki-color-text);">)); </span><span style="color:var(--shiki-token-comment);">// &#39;[object String]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">)); </span><span style="color:var(--shiki-token-comment);">// &#39;[object Boolean]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-keyword);">n</span><span style="color:var(--shiki-color-text);">)); </span><span style="color:var(--shiki-token-comment);">// &#39;[object BigInt]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">)); </span><span style="color:var(--shiki-token-comment);">// &#39;[object Null]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">undefined</span><span style="color:var(--shiki-color-text);">)); </span><span style="color:var(--shiki-token-comment);">// &#39;[object Undefined]&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-function);">Symbol</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;a&quot;</span><span style="color:var(--shiki-color-text);">))); </span><span style="color:var(--shiki-token-comment);">// &#39;[object Symbol]&#39;</span></span>
<span class="line"></span></code></pre></div><p>这里需要调用 <code>call</code> 就是为了显式地改变 <code>this</code> 指向为我们的目标变量。</p><p>如果不改变 <code>this</code> 指向为我们的目标变量 <code>xxx</code>，<code>this</code> 将永远指向调用的 <code>Object.prototype</code>，也就是原型 对象，对原型对象调用 <code>toString</code> 方法，结果永远都是 <code>[object Object]</code>，如下代码所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.toString</span><span style="color:var(--shiki-color-text);">([]); </span><span style="color:var(--shiki-token-comment);">// 输出 &#39;[object Object]&#39;  不调用 call，this 指向 Object.prototype，判断类型为 Object。</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">([]); </span><span style="color:var(--shiki-token-comment);">// 输出 &#39;[object Array]&#39;   调用 call，this 指向 []，判断类型为 Array</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.toString</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 输出 &#39;[object Object]&#39; 不调用 call，this 指向 Object.prototype，判断类型为 Object。</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">toString</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 输出 &#39;[object Number]&#39; 调用 call，this 指向包装对象 Number {1}，判断类型为 Number</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-伪数组转数组" tabindex="-1">2.伪数组转数组 <a class="header-anchor" href="#_2-伪数组转数组" aria-hidden="true">#</a></h2><p>伪数组转数组，在 es6 之前，可以使用 <code>Array.prototype.slice.call(xxx)</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">add</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">args</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Array</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">slice</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(arguments);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// 也可以这么写 const args = [].slice.call(arguments)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">args</span><span style="color:var(--shiki-token-function);">.push</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 可以使用数组上的方法了</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">add</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"></span></code></pre></div><p>原理同精准判断一个数据类型相同，如果不改变 <code>this</code> 指向为目标伪数组，<code>this</code> 将永远指向调用的 <code>Array.prototype</code>，就不会生效。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 从 slice 方法原理理解为什么要调用 call</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Array</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">prototype</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-function);">slice</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (start</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> end) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">res</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> [];</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  start </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> start </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  end </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> end </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">length</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> start; i </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> end; i</span><span style="color:var(--shiki-token-keyword);">++</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">res</span><span style="color:var(--shiki-token-function);">.push</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">[i]); </span><span style="color:var(--shiki-token-comment);">// 这里的 this 就是伪数组，所以要调用 call</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> res;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span></code></pre></div><h2 id="_3-es5-实现继承" tabindex="-1">3.ES5 实现继承 <a class="header-anchor" href="#_3-es5-实现继承" aria-hidden="true">#</a></h2><p>在一个子构造函数中，你可以通过调用父构造函数的 <code>call</code> 方法来实现继承。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Person</span><span style="color:var(--shiki-color-text);">(name) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.name </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> name;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Student</span><span style="color:var(--shiki-color-text);">(name</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> grade) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">Person</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> name);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.grade </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> grade;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">p1</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Person</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;zhangsan&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">s1</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Student</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;zhangsan&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">100</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"></span></code></pre></div><p>上面的代码示例中，构造函数 <code>Student</code> 中会拥有构造函数 <code>Person</code> 中的 <code>name</code> 属性，<code>grade</code> 属性是 <code>Student</code> 自己的。</p><p>这里的代码如果换成 ES6 的，就等价于下面的代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Person</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">constructor</span><span style="color:var(--shiki-color-text);">(name) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.name </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> name;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Student</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Person</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">constructor</span><span style="color:var(--shiki-color-text);">(name</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> grade) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-function);">super</span><span style="color:var(--shiki-color-text);">(name);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.grade </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> grade;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">p1</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Person</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;zhangsan&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">s1</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Student</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;zhangsan&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">100</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"></span></code></pre></div><p>关于继承，同学们掌握 ES6 的实现方式就好，ES5 的做了解即可，因为现在大家基本上都用 ES6 的写法了，如果 想对 ES5 的继承有深入研究，可以去看一下《JavaScript 高级程序设计（第 4 版）》原型和原型链相关的章节 。</p><h2 id="_4-处理回调函数-this-丢失问题" tabindex="-1">4.处理回调函数 this 丢失问题 <a class="header-anchor" href="#_4-处理回调函数-this-丢失问题" aria-hidden="true">#</a></h2><p>执行下面的代码，回调函数会导致 <code>this</code> 丢失。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  userName</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;zhangsan&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">sayName</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.userName);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-token-function);">.sayName</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 输出 &#39;zhangsan&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">fn</span><span style="color:var(--shiki-color-text);">(callback) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">typeof</span><span style="color:var(--shiki-color-text);"> callback </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;function&quot;</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-function);">callback</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">fn</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);">.sayName); </span><span style="color:var(--shiki-token-comment);">// 输出 undefined</span></span>
<span class="line"></span></code></pre></div><p>导致这样现象的原因是回调函数执行的时候 <code>this</code> 指向已经是 <code>window</code> 了，所以输出 <code>undefined</code>。</p><p>可以使用 <code>call</code> 改变 <code>this</code> 指向，代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  userName</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;zhangsan&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">sayName</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.log</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">.userName);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-token-function);">.sayName</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 输出 &#39;zhangsan&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">fn</span><span style="color:var(--shiki-color-text);">(callback</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> context) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// 定义一个 context 参数，可以把上下文传进去</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">typeof</span><span style="color:var(--shiki-color-text);"> callback </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;function&quot;</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">callback</span><span style="color:var(--shiki-token-function);">.call</span><span style="color:var(--shiki-color-text);">(context); </span><span style="color:var(--shiki-token-comment);">// 显式改变 this 值，指向传入的 context</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">fn</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">obj</span><span style="color:var(--shiki-color-text);">.sayName</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> obj); </span><span style="color:var(--shiki-token-comment);">// 输出 &#39;zhangsan&#39;</span></span>
<span class="line"></span></code></pre></div>`,58),e=[l];function r(p,i,c,k,y,h){return n(),o("div",null,e)}const d=s(t,[["render",r]]);export{x as __pageData,d as default};
